{"qpl - What is the average age for all students who do not own any pets ?": {"db_id": "pets_1", "question": "What is the average age for all students who do not own any pets ?", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)", "qpl": "#1 = Scan Table [ Student ] Output [ Age , StuID ] ; #2 = Scan Table [ Has_Pet ] Output [ StuID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.StuID IS NULL OR #1.StuID = #2.StuID ] Output [ #1.Age ] ; #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Avg_Age ]", "difficulty": "extra", "query_len": 4, "col_names": "Avg_Age", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age , StuID ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #3.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] Output [ avg(Age) AS Average_Age ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] Output [ avg(Age) AS Average_Age ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age , StuID ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #3.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] Output [ avg(Age) AS Average_Age ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] Output [ avg(Age) ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ StuID , Age ]\n #2 = Scan Table [ Has_Pet ] Output [ StuID ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n #4 = Aggregate [ #3 ] Output [ avg(Age) AS Average_Age ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] GroupBy [ ] Output [ avg(Age) AS Average_Age ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ StuID , Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #3.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] Output [ AVG(Age) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ StuID , Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n#4 = Aggregate [ #3 ] Output [ AVG(Age) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ StuID , Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n#4 = Filter [ #1 ] Predicate [ #1.StuID NOT IN (SELECT StuID FROM #2) ] Output [ #1.Age ]\n#5 = Aggregate [ #4 ] Output [ avg(#4.Age) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age , StuID ]\n #2 = Scan Table [ Has_Pet ] Output [ StuID ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n #4 = Aggregate [ #3 ] Output [ AVG(Age) AS Average_Age ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Aggregate [ #1 ] GroupBy [ ] Output [ avg(Age) AS Average_Age ]\n#4 = Filter [ #3 , #2 ] Predicate [ #3.StuID != #2.StuID ] Output [ #3.Average_Age ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Student ] Output [ Age ]\n#2 = Scan Table [ Has_Pet ] Output [ StuID ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.StuID = #2.StuID ] Output [ #1.Age ]\n#4 = Filter [ #1 ] Predicate [ #1.StuID NOT IN (SELECT StuID FROM Has_Pet) ] Output [ #1.Age ]\n#5 = Aggregate [ #4 ] Output [ AVG(Age) AS Average_Age ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - What is the name of the country with the most car makers?": {"db_id": "car_1", "question": "What is the name of the country with the most car makers?", "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "qpl": "#1 = Scan Table [ countries ] Output [ CountryId , CountryName ] ; #2 = Scan Table [ car_makers ] Output [ Country ] ; #3 = Aggregate [ #2 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.Country = #1.CountryId ] Output [ #1.CountryName , #3.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ CountryName ]", "difficulty": "extra", "query_len": 5, "col_names": "Count_Star,CountryName", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ countries ] Output [ CountryName ]\n#2 = Scan Table [ car_makers ] Output [ Country ]\n#3 = Aggregate [ #2 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country , Count_Star ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.Country = #1.CountryName ] Output [ #1.CountryName ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Predicate [ CountryId = #3.Country ] Output [ CountryName ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Predicate [ CountryId = #3.Country ] Output [ CountryName ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Predicate [ CountryId = #3.Country ] Output [ CountryName ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countries ] Output [ CountryName , CountryId ]\n#2 = Scan Table [ car_makers ] Output [ Maker , Country ]\n#3 = Aggregate [ #2 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Country = #1.CountryId ] Output [ #1.CountryName , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ CountryName , Count_Star ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,CountryName", "intersection": "Count_Star,CountryName"}, {"type": "qpl", "query": "#1 = Scan Table [ countries ] Output [ CountryName ]\n#2 = Scan Table [ car_makers ] Output [ Country ]\n#3 = Aggregate [ #2 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country , Count_Star ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.Country = #1.CountryName ] Output [ #1.CountryName ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Predicate [ CountryId = #3.Country ] Output [ CountryName ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Predicate [ CountryName = #3.Country ] Output [ CountryName ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Predicate [ CountryId = #3.Country ] Output [ CountryName ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Id , Country ]\n#2 = Scan Table [ countries ] Output [ CountryName , CountryId ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Country = #2.CountryId ] Output [ #1.Id , #2.CountryName ]\n#4 = Aggregate [ #3 ] GroupBy [ #3.CountryName ] Output [ countstar AS Count_Star , #3.CountryName ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ #4.Count_Star , #4.CountryName ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Scan Table [ countries ] Output [ CountryName ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Country = #2.CountryName ] Output [ #2.CountryName ]\n#4 = Aggregate [ #3 ] GroupBy [ CountryName ] Output [ countstar AS Count_Star , CountryName ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ CountryName ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ car_makers ] Output [ Country ]\n#2 = Aggregate [ #1 ] GroupBy [ Country ] Output [ countstar AS Count_Star , Country ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Country ]\n#4 = Scan Table [ countries ] Output [ CountryName ]\n#5 = Join [ #3 , #4 ] Predicate [ #4.CountryName = #3.Country ] Output [ #4.CountryName ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Give the code of the airport with the least flights.": {"db_id": "flight_2", "question": "Give the code of the airport with the least flights.", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "qpl": "#1 = Scan Table [ airports ] Output [ AirportCode ] ; #2 = Scan Table [ flights ] Output [ DestAirport , SourceAirport ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.AirportCode = #2.DestAirport OR #1.AirportCode = #2.SourceAirport ] Output [ #1.AirportCode ] ; #4 = Aggregate [ #3 ] GroupBy [ AirportCode ] Output [ countstar AS Count_Star , AirportCode ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , AirportCode ]", "difficulty": "extra", "query_len": 5, "col_names": "", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ DestAirport ] Output [ countstar AS Count_Star , DestAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ DestAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.DestAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport ]\n#2 = Scan Table [ airports ] Output [ AirportCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.SourceAirport = #2.AirportCode ] Output [ #2.AirportCode ]\n#4 = Aggregate [ #3 ] GroupBy [ AirportCode ] Output [ countstar AS Count_Star , AirportCode ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ AirportCode ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ DestAirport ] Output [ countstar AS Count_Star , DestAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ DestAirport ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ DestAirport ] Output [ countstar AS Count_Star , DestAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ DestAirport ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ DestAirport ] Output [ countstar AS Count_Star , DestAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ DestAirport ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ flights ] Output [ SourceAirport , DestAirport ]\n#2 = Aggregate [ #1 ] GroupBy [ SourceAirport ] Output [ countstar AS Count_Star , SourceAirport ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ SourceAirport ]\n#4 = Scan Table [ airports ] Output [ AirportCode ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.SourceAirport = #4.AirportCode ] Output [ #4.AirportCode ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": true, "col_names": "", "intersection": ""}]}, "qpl - Which employee received the most awards in evaluations? Give me the employee name.": {"db_id": "employee_hire_evaluation", "question": "Which employee received the most awards in evaluations? Give me the employee name.", "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "qpl": "#1 = Scan Table [ employee ] Output [ Name , Employee_ID ] ; #2 = Scan Table [ evaluation ] Output [ Employee_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.Employee_ID = #1.Employee_ID ] Output [ #1.Name , #3.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name ]", "difficulty": "extra", "query_len": 5, "col_names": "Name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = Join [ #2 , employee ] Predicate [ #2.Employee_ID = employee.Employee_ID ] Output [ employee.Name , #2.Count_Star ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = Join [ #2 , employee ] Predicate [ #2.Employee_ID = employee.Employee_ID ] Output [ employee.Name , #2.Count_Star ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = Join [ #2 , employee ] Predicate [ #2.Employee_ID = employee.Employee_ID ] Output [ employee.Name , #2.Count_Star ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Scan Table [ employee ] Output [ Employee_ID , Name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Employee_ID = #4.Employee_ID ] Output [ #4.Name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Scan Table [ employee ] Output [ Employee_ID , Name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Employee_ID = #4.Employee_ID ] Output [ #4.Name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Scan Table [ employee ] Output [ Employee_ID , Name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Employee_ID = #4.Employee_ID ] Output [ #4.Name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = Join [ #2 , employee ] Predicate [ #2.Employee_ID = employee.Employee_ID ] Output [ employee.Name , #2.Count_Star ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name , Count_Star ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Scan Table [ employee ] Output [ Employee_ID , Name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Employee_ID = #4.Employee_ID ] Output [ #4.Name ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = Join [ #2 , employee ] Predicate [ #2.Employee_ID = employee.Employee_ID ] Output [ employee.Name , #2.Count_Star ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Scan Table [ employee ] Output [ Employee_ID , Name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Employee_ID = #4.Employee_ID ] Output [ #4.Name ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Scan Table [ employee ] Output [ Employee_ID , Name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Employee_ID = #4.Employee_ID ] Output [ #4.Name ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ evaluation ] Output [ Employee_ID ]\n#2 = Aggregate [ #1 ] GroupBy [ Employee_ID ] Output [ countstar AS Count_Star , Employee_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Employee_ID ]\n#4 = Join [ #3 , employee ] Predicate [ #3.Employee_ID = employee.Employee_ID ] Output [ employee.Name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Return the id and type code of the template that is used for the greatest number of documents.": {"db_id": "cre_Doc_Template_Mgt", "question": "Return the id and type code of the template that is used for the greatest number of documents.", "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "qpl": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ] ; #2 = Scan Table [ Documents ] Output [ Template_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_Type_Code , #3.Template_ID , #3.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "difficulty": "extra", "query_len": 5, "col_names": "Template_ID,Template_Type_Code", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n #2 = Scan Table [ Documents ] Output [ Template_ID ]\n #3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n #4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code ]\n #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}, {"type": "qpl", "query": "#1 = Scan Table [ Templates ] Output [ Template_ID , Template_Type_Code ]\n#2 = Scan Table [ Documents ] Output [ Template_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Template_ID ] Output [ countstar AS Count_Star , Template_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Template_ID = #1.Template_ID ] Output [ #1.Template_ID , #1.Template_Type_Code , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Template_ID , Template_Type_Code ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Template_ID,Template_Type_Code", "intersection": "Template_ID,Template_Type_Code"}]}, "qpl - What is the document id and name with greatest number of paragraphs?": {"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id and name with greatest number of paragraphs?", "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "qpl": "#1 = Scan Table [ Documents ] Output [ Document_Name , Document_ID ] ; #2 = Scan Table [ Paragraphs ] Output [ Document_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_Name , #3.Document_ID , #3.Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_Name , Document_ID , Count_Star ]", "difficulty": "extra", "query_len": 5, "col_names": "Count_Star,Document_ID,Document_Name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Count_Star ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "Document_ID,Document_Name", "intersection": "Document_ID,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Count_Star ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "Document_ID,Document_Name", "intersection": "Document_ID,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n #2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n #3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Count_Star ]\n #5 = Join [ #1 , #4 ] Predicate [ #4.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Count_Star ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "Count_Star,Document_ID", "intersection": "Count_Star,Document_ID"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}, {"type": "qpl", "query": "#1 = Scan Table [ Documents ] Output [ Document_ID , Document_Name ]\n#2 = Scan Table [ Paragraphs ] Output [ Document_ID ]\n#3 = Aggregate [ #2 ] GroupBy [ Document_ID ] Output [ countstar AS Count_Star , Document_ID ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.Document_ID = #1.Document_ID ] Output [ #1.Document_ID , #1.Document_Name , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Document_ID , Document_Name , Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Count_Star,Document_ID,Document_Name", "intersection": "Document_ID,Count_Star,Document_Name"}]}, "qpl - What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?": {"db_id": "museum_visit", "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "qpl": "#1 = Scan Table [ visitor ] Output [ ID , Level_of_membership , Name ] ; #2 = Scan Table [ visit ] Output [ Total_spent , visitor_ID ] ; #3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ visitor_ID , SUM(Total_spent) AS Sum_Total_spent ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.visitor_ID = #1.ID ] Output [ #3.visitor_ID , #1.Name , #3.Sum_Total_spent , #1.Level_of_membership ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_Total_spent DESC ] Output [ Name , Level_of_membership , visitor_ID , Sum_Total_spent ]", "difficulty": "extra", "query_len": 5, "col_names": "ID,Level_of_membership,Name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_spent DESC ] Output [ visitor_ID , Total_spent ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID ]\n#5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.visitor_ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID , Total_Spent ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_spent DESC ] Output [ visitor_ID , Total_spent ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_spent DESC ] Output [ visitor_ID ]\n#5 = Join [ #1 , #4 ] Predicate [ #1.ID = #4.visitor_ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID , Total_Spent ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n #2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n #3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_spent , visitor_ID ]\n #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_spent DESC ] Output [ visitor_ID , Total_spent ]\n #5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#2 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#3 = Aggregate [ #2 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID , Total_Spent ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.visitor_ID = #1.ID ] Output [ #1.ID , #1.Name , #1.Level_of_membership ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#2 = Aggregate [ #1 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID , Total_Spent ]\n#4 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.visitor_ID = #4.ID ] Output [ #4.ID , #4.Name , #4.Level_of_membership ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "ID,Level_of_membership,Name", "intersection": "Name,ID,Level_of_membership"}, {"type": "qpl", "query": "#1 = Scan Table [ visit ] Output [ visitor_ID , Total_spent ]\n#2 = Aggregate [ #1 ] GroupBy [ visitor_ID ] Output [ sum(Total_spent) AS Total_Spent , visitor_ID ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ visitor_ID , Total_Spent ]\n#4 = Scan Table [ visitor ] Output [ ID , Name , Level_of_membership ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.visitor_ID = #4.ID ] Output [ #4.ID , #4.Name , #4.Level_of_membership ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Spent DESC ] Output [ ID , Name , Level_of_membership ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - How many battles did not lose any ship with tonnage '225'?": {"db_id": "battle_death", "question": "How many battles did not lose any ship with tonnage '225'?", "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "qpl": "#1 = Scan Table [ battle ] Output [ id ] ; #2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle , tonnage ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.lost_in_battle IS NULL OR #1.id = #2.lost_in_battle ] Output [ #1.id ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "difficulty": "extra", "query_len": 4, "col_names": "Count_Star", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n#4 = Aggregate [ #3 ] GroupBy [ ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n#4 = Aggregate [ #3 ] GroupBy [ ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n #2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ id , lost_in_battle ]\n#2 = Scan Table [ battle ] Output [ id ]\n#3 = Except [ #2 , #1 ] Predicate [ #2.id = #1.lost_in_battle ] Output [ #2.id ]\n#4 = Aggregate [ #3 ] GroupBy [ ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n #2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ id ]\n #3 = Join [ #1 , #2 ] Predicate [ #2.id = #1.id ] Output [ #1.id ]\n #4 = Except [ #1 , #3 ] Predicate [ #1.id = #3.id ] Output [ #1.id ]\n #5 = Aggregate [ #4 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ id , lost_in_battle ]\n#2 = Scan Table [ battle ] Output [ id ]\n#3 = Except [ #2 , #1 ] Predicate [ #1.lost_in_battle = #2.id ] Output [ #2.id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n #2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n #4 = Aggregate [ #3 ] GroupBy [ ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ id ]\n#2 = Scan Table [ battle ] Output [ id ]\n#3 = Except [ #2 , #1 ] Predicate [ #2.id = #1.lost_in_battle ] Output [ #2.id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ battle ] Output [ id ]\n#2 = Scan Table [ ship ] Predicate [ tonnage = '225' ] Output [ lost_in_battle ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.lost_in_battle ] Output [ #1.id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.": {"db_id": "student_transcripts_tracking", "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "qpl": "#1 = Scan Table [ Addresses ] Predicate [ state_province_county = 'NorthCarolina' ] Output [ address_id , state_province_county ] ; #2 = Scan Table [ Students ] Output [ current_address_id , last_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.current_address_id = #1.address_id ] Distinct [ true ] Output [ #2.last_name ] ; #4 = Scan Table [ Students ] Output [ last_name , student_id ] ; #5 = Scan Table [ Student_Enrolment ] Output [ student_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.student_id = #4.student_id ] Distinct [ true ] Output [ #4.last_name ] ; #7 = Except [ #3 , #6 ] Predicate [ #3.last_name = #6.last_name ] Output [ #3.last_name ]", "difficulty": "extra", "query_len": 7, "col_names": "last_name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n#5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n #2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n #4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n #5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n #2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ last_name ]\n #4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n #5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id ]\n#5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n#5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n#5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n #2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n #4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n #5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n #2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n #4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n #5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n#5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n#5 = Except [ #3 , #4 ] Output [ last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n #2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n #4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n #5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Students ] Output [ last_name , current_address_id ]\n#2 = Scan Table [ Addresses ] Predicate [ state_province_county = 'North Carolina' ] Output [ address_id ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.current_address_id = #2.address_id ] Output [ #1.last_name ]\n#4 = Scan Table [ Student_Enrolment ] Output [ student_id , degree_program_id ]\n#5 = Except [ #3 , #4 ] Predicate [ #3.last_name = #4.student_id ] Output [ #3.last_name ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?": {"db_id": "tvshow", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "qpl": "#1 = Scan Table [ TV_Channel ] Output [ id , Country , series_name ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Channel , Directed_by ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Channel = #1.id ] Distinct [ true ] Output [ #1.Country , #1.series_name ] ; #4 = Scan Table [ TV_Channel ] Output [ id , Country , series_name ] ; #5 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel , Directed_by ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.Channel = #4.id ] Distinct [ true ] Output [ #4.series_name , #4.Country ] ; #7 = Join [ #3 , #6 ] Predicate [ #3.series_name = #6.series_name ] Distinct [ true ] Output [ #3.Country , #3.series_name ]", "difficulty": "extra", "query_len": 7, "col_names": "Country,series_name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n #4 = Scan Table [ TV_Channel ] Output [ series_name , Country , id ]\n #5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country , id ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": false, "col_names": "Country,series_name", "intersection": "Country,series_name"}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' OR Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#2 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.id ] Output [ #2.series_name , #2.Country ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country , id ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": false, "col_names": "Country,series_name", "intersection": "Country,series_name"}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n #4 = Scan Table [ TV_Channel ] Output [ series_name , Country , id ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.id = #3.Channel ] Output [ #4.series_name , #4.Country ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country , id ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": false, "col_names": "Country,series_name", "intersection": "Country,series_name"}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.Channel = #4.id ] Output [ #4.series_name , #4.Country ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Title , Channel ]\n#2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Title , Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.Channel = #2.Channel ] Output [ #1.Title , #1.Channel ]\n#4 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n#5 = Join [ #3 , #4 ] Predicate [ #4.id = #3.Channel ] Output [ #4.series_name , #4.Country ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ series_name , Country ]\n #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ]\n #3 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Michael Chang' ] Output [ Channel ]\n #4 = Intersect [ #2 , #3 ] Output [ Channel ]\n #5 = Join [ #1 , #4 ] Predicate [ #4.Channel = #1.id ] Output [ #1.series_name , #1.Country ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Which continent speaks the most languages?": {"db_id": "world_1", "question": "Which continent speaks the most languages?", "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "qpl": "#1 = Scan Table [ country ] Output [ Code , Continent ] ; #2 = Scan Table [ countrylanguage ] Output [ CountryCode ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #1.Continent ] ; #4 = Aggregate [ #3 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "difficulty": "extra", "query_len": 5, "col_names": "Continent", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ Continent , Language ]\n#2 = Aggregate [ #1 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Output [ Continent ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode ]\n#3 = Aggregate [ #2 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , CountryCode ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.CountryCode = #1.Code ] Output [ #1.Continent , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent , Count_Star ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Output [ Continent ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode ]\n#3 = Aggregate [ #2 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , CountryCode ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.CountryCode = #1.Code ] Output [ #1.Continent , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent , Count_Star ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ Continent , Language ]\n#2 = Aggregate [ #1 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Output [ Continent , Code ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #1.Continent , #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Continent", "intersection": "Continent"}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Continent ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Continent ]\n#4 = Aggregate [ #3 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ] .", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Output [ Continent ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode ]\n#3 = Aggregate [ #2 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , CountryCode ]\n#4 = Join [ #1 , #3 ] Predicate [ #3.CountryCode = #1.Code ] Output [ #1.Continent , #3.Count_Star ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent , Count_Star ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ Continent , Language ]\n#2 = Aggregate [ #1 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Output [ Continent , Code ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #1.Continent , #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ #3.Continent ] Output [ countstar AS Count_Star , #3.Continent ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ #4.Continent ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ countstar AS Count_Star , CountryCode ]\n#3 = Scan Table [ country ] Output [ Code , Continent ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.CountryCode = #3.Code ] Output [ #2.Count_Star , #3.Continent ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent , Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "Continent,Count_Star", "intersection": "Continent"}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ Continent , Language ]\n#2 = Aggregate [ #1 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Output [ Continent , Language ]\n#2 = Aggregate [ #1 ] GroupBy [ Continent ] Output [ countstar AS Count_Star , Continent ]\n#3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Continent ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - What is the language that is used by the largest number of Asian nations?": {"db_id": "world_1", "question": "What is the language that is used by the largest number of Asian nations?", "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "qpl": "#1 = Scan Table [ country ] Output [ Code , Continent ] ; #2 = Filter [ #1 ] Predicate [ Continent = 'Asia' ] Output [ Code ] ; #3 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.CountryCode = #2.Code ] Output [ #3.Language ] ; #5 = Aggregate [ #4 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ] ; #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "difficulty": "extra", "query_len": 6, "col_names": "Language", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code , Name ]\n #2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n #3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n #4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ CountryCode , Language ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}, {"type": "qpl", "query": "#1 = Scan Table [ country ] Predicate [ Continent = 'Asia' ] Output [ Code ]\n#2 = Scan Table [ countrylanguage ] Output [ Language , CountryCode ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Output [ #2.Language ]\n#4 = Aggregate [ #3 ] GroupBy [ Language ] Output [ countstar AS Count_Star , Language ]\n#5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Language ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "Language", "intersection": "Language"}]}, "qpl - What is the total number of people living in the nations that do not use English?": {"db_id": "world_1", "question": "What is the total number of people living in the nations that do not use English?", "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "qpl": "#1 = Scan Table [ country ] Output [ Name , Population ] ; #2 = Scan Table [ country ] Output [ Name , Code ] ; #3 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ CountryCode , Language ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.CountryCode = #2.Code ] Distinct [ true ] Output [ #2.Name ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Name = #4.Name ] Output [ #1.Population ] ; #6 = Aggregate [ #5 ] Output [ SUM(Population) AS Sum_Population ]", "difficulty": "extra", "query_len": 6, "col_names": "Sum_Population", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language <> 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) AS Total_Population ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language <> 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population , Code ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.Code = #1.CountryCode ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ SUM(#3.Population) ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.Code = #1.CountryCode ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language <> 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.Code = #1.CountryCode ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' AND IsOfficial = 'T' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language <> 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) AS Total_Population ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language <> 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ countrylanguage ] Predicate [ Language != 'English' ] Output [ CountryCode ]\n#2 = Scan Table [ country ] Output [ Population ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.CountryCode = #2.Code ] Output [ #2.Population ]\n#4 = Aggregate [ #3 ] Output [ sum(#3.Population) ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.": {"db_id": "dog_kennels", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "qpl": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ last_name , professional_id , cell_number , state ] ; #2 = Scan Table [ Professionals ] Output [ last_name , professional_id , cell_number ] ; #3 = Scan Table [ Treatments ] Output [ professional_id ] ; #4 = Aggregate [ #3 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , professional_id ] ; #5 = Join [ #2 , #4 ] Predicate [ #4.professional_id = #2.professional_id ] Output [ #4.Count_Star , #2.professional_id , #2.cell_number , #2.last_name ] ; #6 = Filter [ #5 ] Predicate [ Count_Star > 2 ] Output [ last_name , professional_id , cell_number ] ; #7 = Union [ #1 , #6 ] Output [ #1.cell_number , #1.last_name , #1.professional_id ]", "difficulty": "extra", "query_len": 7, "col_names": "cell_number,last_name,professional_id", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ professional_id , last_name , cell_number ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Aggregate [ #2 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , professional_id ]\n#4 = Filter [ #3 ] Predicate [ Count_Star > 2 ] Output [ professional_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.professional_id = #1.professional_id ] Output [ #1.professional_id , #1.last_name , #1.cell_number ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ professional_id , last_name , cell_number ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Aggregate [ #2 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , professional_id ]\n#4 = Filter [ #3 ] Predicate [ Count_Star > 2 ] Output [ professional_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.professional_id = #1.professional_id ] Output [ #1.professional_id , #1.last_name , #1.cell_number ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' OR professional_id IN (Select professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'Indiana' ] Output [ professional_id , last_name , cell_number ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Aggregate [ #2 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star , professional_id ]\n#4 = Filter [ #3 ] Predicate [ Count_Star > 2 ] Output [ professional_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.professional_id = #1.professional_id ] Output [ #1.professional_id , #1.last_name , #1.cell_number ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Predicate [ state = 'indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2) ] Output [ professional_id , last_name , cell_number ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 1, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.": {"db_id": "dog_kennels", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "qpl": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ] ; #2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ] ; #3 = Scan Table [ Treatments ] Output [ dog_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ] ; #5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ countstar AS Count_Star , owner_id ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.owner_id = #1.owner_id ] Output [ #1.last_name , #5.Count_Star , #1.owner_id ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , owner_id , last_name ]", "difficulty": "extra", "query_len": 7, "col_names": "last_name,owner_id", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ professional_id , dog_id ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name ]\n#6 = Scan Table [ Charges ] Output [ charge_id , charge_amount ]\n#7 = Scan Table [ Treatments ] Output [ treatment_id , dog_id ]\n#8 = Join [ #6 , #7 ] Predicate [ #7.treatment_id = #6.charge_id ] Output [ #7.dog_id , #6.charge_amount ]\n#9 = Aggregate [ #8 ] GroupBy [ #8.dog_id ] Output [ sumcharge_amount AS Sum_Charge_Amount , #8.dog_id ]\n#10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Sum_Charge_Amount DESC ] Output [ dog_id , Sum_Charge_Amount ]\n#11 = Join [ #5 , #10 ] Predicate [ #10.dog_id = #5.owner_id ] Output [ #5.owner_id , #5.last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ treatment_id , dog_id ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name ]\n#6 = Scan Table [ Charges ] Output [ charge_id , charge_amount ]\n#7 = Scan Table [ Treatment_Types ] Output [ treatment_type_code ]\n#8 = Join [ #3 , #7 ] Predicate [ #7.treatment_type_code = #3.treatment_type_code ] Output [ #3.treatment_id , #8.charge_id ]\n#9 = Join [ #6 , #8 ] Predicate [ #8.charge_id = #6.charge_id ] Output [ #8.treatment_id , #6.charge_amount ]\n#10 = Aggregate [ #9 ] GroupBy [ #9.treatment_id ] Output [ sum(charge_amount) AS Total_Charges , #9.treatment_id ]\n#11 = Join [ #5 , #10 ] Predicate [ #10.treatment_id = #5.owner_id ] Output [ #5.owner_id , #5.last_name , #10.Total_Charges ]\n#12 = TopSort [ #11 ] Rows [ 1 ] OrderBy [ Total_Charges DESC ] Output [ owner_id , last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 12, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ dog_id , owner_id ]\n#3 = Scan Table [ Treatments ] Output [ treatment_id , dog_id ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name ]\n#6 = Scan Table [ Charges ] Output [ charge_id , charge_amount ]\n#7 = Join [ #3 , #6 ] Predicate [ #6.charge_id = #3.treatment_id ] Output [ #3.treatment_id , #6.charge_amount ]\n#8 = Aggregate [ #7 ] GroupBy [ #7.treatment_id ] Output [ sumcharge_amount AS Sum_Charge_Amount , #7.treatment_id ]\n#9 = Join [ #5 , #8 ] Predicate [ #8.treatment_id = #7.treatment_id ] Output [ #5.owner_id , #5.last_name , #8.Sum_Charge_Amount ]\n#10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Sum_Charge_Amount DESC ] Output [ owner_id , last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 10, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n #2 = Scan Table [ Dogs ] Output [ dog_id , owner_id ]\n #3 = Scan Table [ Treatments ] Output [ professional_id , dog_id ]\n #4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ]\n #5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name ]\n #6 = Scan Table [ Treatments ] Output [ cost_of_treatment ]\n #7 = Aggregate [ #6 ] Output [ sum(cost_of_treatment) AS Total_Cost ]\n #8 = Join [ #5 , #7 ] Predicate [ #7.Total_Cost = #5.owner_id ] Output [ #5.owner_id , #5.last_name ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 8, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ dog_id , owner_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , last_name ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , last_name ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ treatment_id , dog_id ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ countstar AS Count_Star , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ owner_id , last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , professional_id ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id , #3.professional_id ]\n#5 = Scan Table [ Charges ] Output [ charge_id ]\n#6 = Join [ #3 , #5 ] Output [ #3.professional_id ]\n#7 = Aggregate [ #6 ] GroupBy [ #6.professional_id ] Output [ countstar AS Count_Star , #6.professional_id ]\n#8 = Join [ #1 , #7 ] Predicate [ #7.professional_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name , #7.Count_Star ]\n#9 = TopSort [ #8 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ owner_id , last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 9, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ dog_id , owner_id ]\n#3 = Scan Table [ Treatments ] Output [ treatment_id , dog_id ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name ]\n#6 = Scan Table [ Charges ] Output [ charge_id , charge_amount ]\n#7 = Scan Table [ Treatments ] Output [ treatment_id , cost_of_treatment ]\n#8 = Join [ #6 , #7 ] Predicate [ #7.treatment_id = #6.charge_id ] Output [ #7.cost_of_treatment ]\n#9 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ sum(#8.cost_of_treatment) AS Total_Cost , owner_id ]\n#10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 10, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ dog_id , owner_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sumcost_of_treatment AS Sum_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Sum_Cost DESC ] Output [ owner_id , last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ professional_id ] Output [ sum(cost_of_treatment) AS Total_Cost , professional_id ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ professional_id ]\n#5 = Join [ #1 , #4 ] Predicate [ #1.owner_id = #4.professional_id ] Output [ #1.owner_id , #1.last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "last_name,owner_id", "intersection": "last_name,owner_id"}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , last_name ]\n#2 = Scan Table [ Dogs ] Output [ dog_id , owner_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Aggregate [ #3 ] GroupBy [ dog_id ] Output [ sumcost_of_treatment AS Total_Cost , dog_id ]\n#5 = Join [ #2 , #4 ] Predicate [ #4.dog_id = #2.dog_id ] Output [ #2.owner_id , #4.Total_Cost ]\n#6 = Aggregate [ #5 ] GroupBy [ owner_id ] Output [ maxTotal_Cost AS Max_Total_Cost , owner_id ]\n#7 = Join [ #1 , #6 ] Predicate [ #6.owner_id = #1.owner_id ] Output [ #1.owner_id , #1.last_name ]\n#8 = TopSort [ #7 ] Rows [ 1 ] OrderBy [ Max_Total_Cost DESC ] Output [ owner_id , last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 8, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - What is the description of the treatment type that costs the least money in total?": {"db_id": "dog_kennels", "question": "What is the description of the treatment type that costs the least money in total?", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "qpl": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ] ; #2 = Scan Table [ Treatments ] Output [ cost_of_treatment , treatment_type_code ] ; #3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ treatment_type_code , SUM(cost_of_treatment) AS Sum_cost_of_treatment ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description , #3.Sum_cost_of_treatment ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Sum_cost_of_treatment ASC ] Output [ Sum_cost_of_treatment , treatment_type_description ]", "difficulty": "extra", "query_len": 5, "col_names": "treatment_type_description", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ SUM(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ #3.treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}, {"type": "qpl", "query": "#1 = Scan Table [ Treatment_Types ] Output [ treatment_type_code , treatment_type_description ]\n#2 = Scan Table [ Treatments ] Output [ treatment_type_code , cost_of_treatment ]\n#3 = Aggregate [ #2 ] GroupBy [ treatment_type_code ] Output [ sum(cost_of_treatment) AS Total_Cost , treatment_type_code ]\n#4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Total_Cost ASC ] Output [ treatment_type_code ]\n#5 = Join [ #1 , #4 ] Predicate [ #4.treatment_type_code = #1.treatment_type_code ] Output [ #1.treatment_type_description ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": true, "is_correct": true, "col_names": "treatment_type_description", "intersection": "treatment_type_description"}]}, "qpl - Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.": {"db_id": "dog_kennels", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "qpl": "#1 = Scan Table [ Owners ] Output [ zip_code , owner_id ] ; #2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ] ; #3 = Scan Table [ Treatments ] Output [ cost_of_treatment , dog_id ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #3.cost_of_treatment , #2.owner_id ] ; #5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ owner_id , SUM(cost_of_treatment) AS Sum_cost_of_treatment ] ; #6 = Join [ #1 , #5 ] Predicate [ #5.owner_id = #1.owner_id ] Output [ #1.zip_code , #5.Sum_cost_of_treatment , #1.owner_id ] ; #7 = TopSort [ #6 ] Rows [ 1 ] OrderBy [ Sum_cost_of_treatment DESC ] Output [ zip_code , owner_id , Sum_cost_of_treatment ]", "difficulty": "extra", "query_len": 7, "col_names": "Sum_cost_of_treatment,owner_id,zip_code", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sumcost_of_treatment AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #4.owner_id ] Output [ #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.owner_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n #2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n #3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n #4 = Aggregate [ #3 ] GroupBy [ dog_id ] Output [ sum(cost_of_treatment) AS Total_Cost , dog_id ]\n #5 = Join [ #2 , #4 ] Predicate [ #2.dog_id = #4.dog_id ] Output [ #2.owner_id , #4.Total_Cost ]\n #6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , zip_code ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , zip_code ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ SUM(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.dog_id = #2.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sum(cost_of_treatment) AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , zip_code ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Owners ] Output [ owner_id , zip_code ]\n#2 = Scan Table [ Dogs ] Output [ owner_id , dog_id ]\n#3 = Scan Table [ Treatments ] Output [ dog_id , cost_of_treatment ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.dog_id = #3.dog_id ] Output [ #2.owner_id , #3.cost_of_treatment ]\n#5 = Aggregate [ #4 ] GroupBy [ owner_id ] Output [ sumcost_of_treatment AS Total_Cost , owner_id ]\n#6 = TopSort [ #5 ] Rows [ 1 ] OrderBy [ Total_Cost DESC ] Output [ owner_id , #1.zip_code ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.": {"db_id": "dog_kennels", "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "qpl": "#1 = Scan Table [ Treatments ] Output [ cost_of_treatment ] ; #2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Avg_cost_of_treatment ] ; #3 = Scan Table [ Treatments ] Output [ cost_of_treatment ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.cost_of_treatment < #2.Avg_cost_of_treatment ] Output [ #3.cost_of_treatment ] ; #5 = Scan Table [ Professionals ] Output [ first_name , last_name ] ; #6 = Join [ #4 , #5 ] Output [ #5.last_name , #5.first_name ] ; #7 = Sort [ #6 ] OrderBy [ first_name ASC , last_name ASC ] Distinct [ true ] Output [ first_name , last_name ]", "difficulty": "extra", "query_len": 7, "col_names": "first_name,last_name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS Avg_Cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Avg_Cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS Average_Cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Average_Cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ first_name , last_name , professional_id ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS avg_cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.avg_cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS Avg_Cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Avg_Cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n#5 = Join [ #3 , #4 ] Predicate [ #4.professional_id = #3.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n #2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Avg_Cost ]\n #3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Avg_Cost ] Output [ professional_id ]\n #4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.professional_id = #3.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n #2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS avg_cost ]\n #3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.avg_cost ] Output [ professional_id ]\n #4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n #5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS Avg_Cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Avg_Cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n#5 = Join [ #3 , #4 ] Predicate [ #4.professional_id = #3.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n #2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS avg_cost ]\n #3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.avg_cost ] Output [ professional_id ]\n #4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.professional_id = #3.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS Avg_Cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Avg_Cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n#2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS Avg_Cost ]\n#3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Avg_Cost ] Output [ professional_id ]\n#4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n #2 = Aggregate [ #1 ] Output [ AVG(cost_of_treatment) AS Average_Cost ]\n #3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.Average_Cost ] Output [ professional_id ]\n #4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n #5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]\n #6 = Distinct [ true ] Output [ #5.first_name , #5.last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 6, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Treatments ] Output [ professional_id , cost_of_treatment ]\n #2 = Aggregate [ #1 ] Output [ avg(cost_of_treatment) AS avg_cost ]\n #3 = Filter [ #1 ] Predicate [ cost_of_treatment < #2.avg_cost ] Output [ professional_id ]\n #4 = Scan Table [ Professionals ] Output [ professional_id , first_name , last_name ]\n #5 = Join [ #3 , #4 ] Predicate [ #3.professional_id = #4.professional_id ] Output [ #4.first_name , #4.last_name ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - List the names of the dogs of the rarest breed and the treatment dates of them.": {"db_id": "dog_kennels", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "qpl": "#1 = Scan Table [ Dogs ] Output [ breed_code ] ; #2 = Aggregate [ #1 ] GroupBy [ breed_code ] Output [ countstar AS Count_Star , breed_code ] ; #3 = TopSort [ #2 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ Count_Star , breed_code ] ; #4 = Scan Table [ Dogs ] Output [ name , breed_code , dog_id ] ; #5 = Scan Table [ Treatments ] Output [ date_of_treatment , dog_id ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.dog_id = #4.dog_id ] Output [ #4.breed_code , #4.name , #5.date_of_treatment ] ; #7 = Join [ #3 , #6 ] Predicate [ #3.breed_code = #6.breed_code ] Output [ #6.name , #6.date_of_treatment ]", "difficulty": "extra", "query_len": 7, "col_names": "date_of_treatment,name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.breed_code = #2.breed_code ] Output [ #2.name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #7 = Scan Table [ Dogs ] Output [ breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #6.breed_code = #7.breed_code ] Output [ #7.breed_code ]\n #9 = Aggregate [ #8 ] GroupBy [ breed_code ] Output [ countstar AS Count_Star , breed_code ]\n #10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ breed_code ]\n #11 = Join [ #5 , #10 ] Predicate [ #5.name = #11.name ] Output [ #5.name , #5.date_of_treatment ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ dog_id , breed_code , name ]\n #3 = Join [ #1 , #2 ] Predicate [ #2.breed_code = #1.breed_code ] Output [ #2.name , #1.breed_name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code ]\n #7 = Scan Table [ Dogs ] Output [ breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #7.breed_code = #6.breed_code ] Output [ #7.breed_code ]\n #9 = Aggregate [ #8 ] GroupBy [ breed_code ] Output [ countstar AS Count_Star , breed_code ]\n #10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ breed_code ]\n #11 = Join [ #5 , #10 ] Predicate [ #5.name = #10.breed_code ] Output [ #5.name , #5.date_of_treatment ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n#2 = Scan Table [ Dogs ] Output [ breed_code , name ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.breed_code = #2.breed_code ] Output [ #1.breed_name , #2.name ]\n#4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n#5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.breed_name , #3.name , #4.date_of_treatment ]\n#6 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n#7 = Scan Table [ Dogs ] Output [ breed_code , name ]\n#8 = Join [ #6 , #7 ] Predicate [ #6.breed_code = #7.breed_code ] Output [ #6.breed_name , #7.name ]\n#9 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n#10 = Join [ #8 , #9 ] Predicate [ #9.dog_id = #8.dog_id ] Output [ #8.breed_name , #8.name , #9.date_of_treatment ]\n#11 = Aggregate [ #5 , #10 ] GroupBy [ #5.breed_name , #5.name , #5.date_of_treatment , #10.breed_name , #10.name , #10.date_of_treatment ] Output [ COUNT(*) AS Count_Star , #5.breed_name , #5.name , #5.date_of_treatment , #10.breed_name , #10.name , #10.date_of_treatment ]\n#12 = TopSort [ #11 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ #11.#5.name , #11.#5.date_of_treatment ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 12, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n#2 = Scan Table [ Dogs ] Output [ dog_id , breed_code , name ]\n#3 = Join [ #1 , #2 ] Predicate [ #2.breed_code = #1.breed_code ] Output [ #2.name , #1.breed_name ]\n#4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n#5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n#6 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n#7 = Scan Table [ Dogs ] Output [ dog_id , breed_code , name ]\n#8 = Join [ #6 , #7 ] Predicate [ #7.breed_code = #6.breed_code ] Output [ #7.name , #6.breed_name ]\n#9 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n#10 = Join [ #8 , #9 ] Predicate [ #9.dog_id = #8.dog_id ] Output [ #8.name , #9.date_of_treatment ]\n#11 = Union [ #5 , #10 ] Output [ name , date_of_treatment ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_name ]\n#2 = Scan Table [ Dogs ] Output [ breed_code , name ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.breed_name = #2.breed_code ] Output [ #2.name ]\n#4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n#5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n#6 = Aggregate [ #5 ] GroupBy [ #5.name ] Output [ MIN(#5.date_of_treatment) AS Min_Date , #5.name ]\n#7 = Join [ #5 , #6 ] Predicate [ #5.name = #6.name AND #5.date_of_treatment = #6.Min_Date ] Output [ #5.name , #5.date_of_treatment ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 7, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #2.breed_code = #1.breed_code ] Output [ #2.name , #1.breed_name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #7 = Scan Table [ Dogs ] Output [ breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #7.breed_code = #6.breed_code ] Output [ #6.breed_name ]\n #9 = Aggregate [ #8 ] GroupBy [ breed_name ] Output [ COUNT(*) AS count , breed_name ]\n #10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ count ASC ] Output [ breed_name ]\n #11 = Join [ #5 , #10 ] Predicate [ #5.name = #10.breed_name ] Output [ #5.name , #5.date_of_treatment ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.breed_code = #2.breed_code ] Output [ #2.name , #1.breed_name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code ]\n #7 = Scan Table [ Dogs ] Output [ breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #7.breed_code = #6.breed_code ] Output [ #7.breed_code ]\n #9 = Aggregate [ #8 ] GroupBy [ breed_code ] Output [ countstar AS Count_Star , breed_code ]\n #10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ breed_code ]\n #11 = Join [ #5 , #10 ] Predicate [ #5.name = #10.breed_code ] Output [ #5.name , #5.date_of_treatment ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.breed_code = #2.breed_code ] Output [ #2.name , #1.breed_name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code ]\n #7 = Scan Table [ Dogs ] Output [ breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #6.breed_code = #7.breed_code ] Output [ #7.breed_code ]\n #9 = Aggregate [ #8 ] GroupBy [ breed_code ] Output [ countstar AS Count_Star , breed_code ]\n #10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ breed_code ]\n #11 = Join [ #5 , #10 ] Predicate [ #5.name = #10.breed_code ] Output [ #5.name , #5.date_of_treatment ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.breed_code = #2.breed_code ] Output [ #2.name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Aggregate [ #5 ] GroupBy [ #5.name ] Output [ MIN(#5.date_of_treatment) AS Min_Date , #5.name ]\n #7 = Join [ #5 , #6 ] Predicate [ #5.name = #6.#5.name AND #5.date_of_treatment = #6.Min_Date ] Output [ #5.name , #5.date_of_treatment ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 7, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.breed_code = #2.breed_code ] Output [ #2.name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #3.name = #4.dog_id ] Output [ #3.name , #4.date_of_treatment ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ dog_id , breed_code , name ]\n #3 = Join [ #1 , #2 ] Predicate [ #2.breed_code = #1.breed_code ] Output [ #2.name , #1.breed_name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code ]\n #7 = Scan Table [ Dogs ] Output [ breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #7.breed_code = #6.breed_code ] Output [ #7.breed_code ]\n #9 = Aggregate [ #8 ] GroupBy [ breed_code ] Output [ COUNT(*) AS Count_Star , breed_code ]\n #10 = TopSort [ #9 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] Output [ breed_code ]\n #11 = Join [ #5 , #10 ] Predicate [ #5.name = #10.breed_code ] Output [ #5.name , #5.date_of_treatment ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 11, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #2 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #3 = Join [ #1 , #2 ] Predicate [ #2.breed_code = #1.breed_code ] Output [ #2.name , #1.breed_name ]\n #4 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #5 = Join [ #3 , #4 ] Predicate [ #4.dog_id = #3.dog_id ] Output [ #3.name , #4.date_of_treatment ]\n #6 = Scan Table [ Breeds ] Output [ breed_code , breed_name ]\n #7 = Scan Table [ Dogs ] Output [ name , breed_code ]\n #8 = Join [ #6 , #7 ] Predicate [ #7.breed_code = #6.breed_code ] Output [ #7.name , #6.breed_name ]\n #9 = Scan Table [ Treatments ] Output [ dog_id , date_of_treatment ]\n #10 = Join [ #8 , #9 ] Predicate [ #9.dog_id = #8.dog_id ] Output [ #8.name , #9.date_of_treatment ]\n #11 = Aggregate [ #5 , #10 ] GroupBy [ #5.name , #5.date_of_treatment , #10.name , #10.date_of_treatment ] Output [ #5.name , #5.date_of_treatment ]\n #12 = Aggregate [ #11 ] GroupBy [ #11.name ] Output [ MIN(#11.date_of_treatment) AS Min_Date , #11.name ]\n #13 = Join [ #11 , #12 ] Predicate [ #11.name = #12.name AND #11.date_of_treatment = #12.Min_Date ] Output [ #11.name , #11.date_of_treatment ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 13, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - How many professionals did not operate any treatment on dogs?": {"db_id": "dog_kennels", "question": "How many professionals did not operate any treatment on dogs?", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "qpl": "#1 = Scan Table [ Professionals ] Output [ professional_id ] ; #2 = Scan Table [ Treatments ] Distinct [ true ] Output [ professional_id ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.professional_id = #1.professional_id ] Output [ 1 AS One ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "difficulty": "extra", "query_len": 4, "col_names": "Count_Star", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]\n#4", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 5, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n #2 = Scan Table [ Treatments ] Output [ professional_id ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n #2 = Scan Table [ Treatments ] Output [ professional_id ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n #4 = Aggregate [ #3 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] GroupBy [ professional_id ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}, {"type": "qpl", "query": "#1 = Scan Table [ Professionals ] Output [ professional_id ]\n#2 = Scan Table [ Treatments ] Output [ professional_id ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.professional_id = #2.professional_id ] Output [ #1.professional_id ]\n#4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Count_Star", "intersection": "Count_Star"}]}, "qpl - What is the model of the car with the smallest amount of horsepower?": {"db_id": "car_1", "question": "What is the model of the car with the smallest amount of horsepower?", "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "qpl": "#1 = Scan Table [ car_names ] Output [ Model , MakeId ] ; #2 = Scan Table [ cars_data ] Output [ Horsepower , Id ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Id = #1.MakeId ] Output [ #2.Horsepower , #1.Model ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Model ]", "difficulty": "hard", "query_len": 4, "col_names": "Model", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Id ]\n#3 = Scan Table [ car_names ] Output [ MakeId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.Id = #3.MakeId ] Output [ #3.Model ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Model", "intersection": "Model"}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Id ]\n#3 = Scan Table [ car_names ] Output [ MakeId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.MakeId = #2.Id ] Output [ #3.Model ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Model", "intersection": "Model"}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Id , Horsepower ]\n#3 = Scan Table [ car_names ] Output [ MakeId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.MakeId = #2.Id ] Output [ #3.Model ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Model", "intersection": "Model"}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Model , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Model ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 2, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Model , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Model ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 2, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ ModelId , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ ModelId ]\n#3 = Scan Table [ model_list ] Output [ ModelId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.ModelId = #3.ModelId ] Output [ #3.Model ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Id ]\n#3 = Scan Table [ car_names ] Output [ Model , MakeId ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.Id = #3.MakeId ] Output [ #3.Model ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Model", "intersection": "Model"}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Id ]\n#3 = Scan Table [ car_names ] Output [ MakeId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.Id = #3.MakeId ] Output [ #3.Model ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Model", "intersection": "Model"}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Id ]\n#3 = Scan Table [ car_names ] Output [ MakeId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #2.Id = #3.MakeId ] Output [ #3.Model ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 4, "is_common": true, "is_correct": true, "col_names": "Model", "intersection": "Model"}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Model , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Model ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 2, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ Id , Model , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ Model ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 2, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ cars_data ] Output [ ModelId , Horsepower ]\n#2 = TopSort [ #1 ] Rows [ 1 ] OrderBy [ Horsepower ASC ] Output [ ModelId ]\n#3 = Scan Table [ model_list ] Output [ ModelId , Model ]\n#4 = Join [ #2 , #3 ] Predicate [ #3.ModelId = #2.ModelId ] Output [ #3.Model ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - What are the names of the teachers whose courses have not been arranged?": {"db_id": "course_teach", "question": "What are the names of the teachers whose courses have not been arranged?", "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "qpl": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ] ; #2 = Scan Table [ course_arrange ] Distinct [ true ] Output [ Teacher_ID ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Teacher_ID = #1.Teacher_ID ] Output [ #1.Name ]", "difficulty": "hard", "query_len": 3, "col_names": "Name", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Name , Teacher_ID ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Name , Teacher_ID ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Name , Teacher_ID ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}, {"type": "qpl", "query": "#1 = Scan Table [ teacher ] Output [ Teacher_ID , Name ]\n#2 = Scan Table [ course_arrange ] Output [ Teacher_ID ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Teacher_ID = #2.Teacher_ID ] Output [ #1.Name ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "Name", "intersection": "Name"}]}, "qpl - What are the countries that are not playing cartoons written by Todd Casey?": {"db_id": "tvshow", "question": "What are the countries that are not playing cartoons written by Todd Casey?", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "qpl": "#1 = Scan Table [ TV_Channel ] Distinct [ true ] Output [ Country ] ; #2 = Scan Table [ TV_Channel ] Output [ id , Country ] ; #3 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel , Written_by ] ; #4 = Join [ #2 , #3 ] Predicate [ #3.Channel = #2.id ] Distinct [ true ] Output [ #2.Country ] ; #5 = Except [ #1 , #4 ] Predicate [ #1.Country = #4.Country ] Output [ #1.Country ]", "difficulty": "hard", "query_len": 5, "col_names": "Country", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n#2 = Scan Table [ TV_Channel ] Output [ Country ]\n#3 = Except [ #2 , #1 ] Predicate [ #2.Country = #1.Channel ] Output [ #2.Country ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Written_by != 'Todd Casey' ] Output [ Channel ]\n#2 = Scan Table [ TV_Channel ] Output [ Country ]\n#3 = Except [ #2 , #1 ] Predicate [ #2.Country = #1.Channel ] Output [ #2.Country ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n#2 = Scan Table [ TV_Channel ] Output [ Country ]\n#3 = Except [ #2 , #1 ] Predicate [ #1.Channel = #2.id ] Output [ #2.Country ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n #2 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.Country ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n#2 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.Country ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n #2 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.Country ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n#2 = Scan Table [ Cartoon ] Predicate [ Written_by != 'Todd Casey' ] Output [ Channel ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.Country = #2.Channel ] Output [ #1.Country ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n #2 = Scan Table [ Cartoon ] Predicate [ Written_by != 'Todd Casey' ] Output [ Channel ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.Country ]\n #4 = Except [ #1 , #3 ] Predicate [ #1.Country = #3.Country ] Output [ #1.Country ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n #2 = Scan Table [ Cartoon ] Predicate [ Written_by != 'Todd Casey' ] Output [ Channel ]\n #3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Distinct [ true ] Output [ #1.Country ]\n #4 = Except [ #1 , #3 ] Predicate [ #1.Country = #3.Country ] Output [ #1.Country ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country , id ]\n#2 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n#3 = Join [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ Country ]\n#4 = Except [ #1 , #3 ] Predicate [ #1.Country = #3.Country ] Output [ #1.Country ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n #2 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.Country ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ Country ]\n#2 = Scan Table [ Cartoon ] Predicate [ Written_by = 'Todd Casey' ] Output [ Channel ]\n#3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.Country ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}, "qpl - find the id of tv channels that do not play any cartoon directed by Ben Jones.": {"db_id": "tvshow", "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "qpl": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Distinct [ true ] Output [ Channel , Directed_by ] ; #3 = Except [ #1 , #2 ] Predicate [ #2.Channel = #1.id ] Output [ #1.id ]", "difficulty": "hard", "query_len": 3, "col_names": "id", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ;  #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ;  #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": false, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": false, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ;  #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ;  #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 3, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": true, "with_types": false, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}, {"type": "qpl", "query": "#1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Scan Table [ Cartoon ] Predicate [ Directed_by = 'Ben Jones' ] Output [ Channel ] ; #3 = Except [ #1 , #2 ] Predicate [ #1.id = #2.Channel ] Output [ #1.id ]", "with_values": true, "with_types": true, "is_valid": true, "qpl_len": 3, "is_common": true, "is_correct": true, "col_names": "id", "intersection": "id"}]}, "qpl - Find the average grade of all students who have some friends.": {"db_id": "network_1", "question": "Find the average grade of all students who have some friends.", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "qpl": "#1 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #2 = Scan Table [ Friend ] Output [ student_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #1.grade ] ; #4 = Aggregate [ #3 ] Output [ AVG(grade) AS Avg_grade ]", "difficulty": "hard", "query_len": 4, "col_names": "ID,grade", "gpt_results": [{"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(#3.grade) ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(grade) ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #2 = Scan Table [ Friend ] Output [ student_id , friend_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #1.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(grade) AS Average_Grade ]", "with_values": false, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(grade) AS Average_Grade ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(grade) AS Average_Grade ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg.grade AS Average_Grade ]", "with_values": false, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(grade) ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ avg(grade) AS Average_Grade ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id ] ; #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ; #4 = Aggregate [ #3 ] Output [ AVG(grade) AS Average_Grade ]", "with_values": true, "with_types": false, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id , friend_id ] ;  #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ;  #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ;  #4 = Aggregate [ #3 ] Output [ avg(grade) ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Friend ] Output [ student_id , friend_id ] ;  #2 = Scan Table [ Highschooler ] Output [ ID , grade ] ;  #3 = Join [ #1 , #2 ] Predicate [ #1.student_id = #2.ID ] Output [ #2.grade ] ;  #4 = Aggregate [ #3 ] Output [ avg(grade) AS Average_Grade ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}, {"type": "qpl", "query": "#1 = Scan Table [ Highschooler ] Output [ grade ] ;  #2 = Scan Table [ Friend ] Output [ student_id ] ;  #3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #1.grade ] ;  #4 = Aggregate [ #3 ] Output [ avg(grade) AS Average_Grade ]", "with_values": true, "with_types": true, "is_valid": false, "qpl_len": 4, "is_common": false, "is_correct": false, "col_names": "", "intersection": ""}]}}