"This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the sections in reverse alphabetical order? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the sections in reverse alphabetical order? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum horsepower and the make of the car models with 3 cylinders? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum horsepower and the make of the car models with 3 cylinders? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the name of the conductor that has conducted the most number of orchestras. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the name of the conductor that has conducted the most number of orchestras. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many different series and contents are listed in the TV Channel table? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many different series and contents are listed in the TV Channel table? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names and template ids for documents that contain the letter w in their description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names and template ids for documents that contain the letter w in their description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the average ages of losers and winners across matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the average ages of losers and winners across matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the country codes for countries that do not speak English. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the country codes for countries that do not speak English. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which first names are used for professionals or owners but are not used as dog names? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which first names are used for professionals or owners but are not used as dog names? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and type code of the template that is used for the greatest number of documents. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and type code of the template that is used for the greatest number of documents. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average transcript date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average transcript date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and age of students who have a pet. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and age of students who have a pet. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show location and name for all stadiums with a capacity between 5000 and 10000. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show location and name for all stadiums with a capacity between 5000 and 10000. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the arriving date and the departing date of all the dogs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the arriving date and the departing date of all the dogs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is total bonus given in all evaluations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is total bonus given in all evaluations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which employee received the biggest bonus? Give me the employee name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which employee received the biggest bonus? Give me the employee name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: When did the episode \"A Love of a Lifetime\" air? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: When did the episode \"A Love of a Lifetime\" air? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which first names are used for professionals or owners but are not used as dog names? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which first names are used for professionals or owners but are not used as dog names? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and rank of the 3 youngest winners across all matches. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and rank of the 3 youngest winners across all matches. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and release years for all the songs of the youngest singer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and release years for all the songs of the youngest singer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and rank points of the winner who won the most times. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and rank points of the winner who won the most times. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs that went through a treatment. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs that went through a treatment. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many different degrees are offered? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many different degrees are offered? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Tell me the number of dogs that have not received any treatment . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Tell me the number of dogs that have not received any treatment . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the makers and models? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the makers and models? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of documents that have 2 or more paragraphs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of documents that have 2 or more paragraphs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of poker players ordered by the final tables made in ascending order. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of poker players ordered by the final tables made in ascending order. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the weight of the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the weight of the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many continents speak Chinese? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many continents speak Chinese? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is name of the country that speaks the largest number of languages? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is name of the country that speaks the largest number of languages? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find number of pets owned by students who are older than 20. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find number of pets owned by students who are older than 20. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and grades for each high schooler? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and grades for each high schooler? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of owners who do not own any dogs at this moment. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of owners who do not own any dogs at this moment. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the names of countries that are in Europe and have a population equal to 80000. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the names of countries that are in Europe and have a population equal to 80000. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the number of flights arriving in Aberdeen. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the number of flights arriving in Aberdeen. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the city with the largest population that uses English. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the city with the largest population that uses English. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the name of the high school student with the most friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the name of the high school student with the most friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the first, middle, and last name of the earliest school graduate? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the first, middle, and last name of the earliest school graduate? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the countries having at least one car maker? List name and id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the countries having at least one car maker? List name and id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find all airlines that have fewer than 200 flights. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find all airlines that have fewer than 200 flights. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the weight of the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the weight of the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of high school students and their corresponding number of friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of high school students and their corresponding number of friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the towns from which at least two teachers come from? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the towns from which at least two teachers come from? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is average life expectancy in the countries where English is not the official language? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is average life expectancy in the countries where English is not the official language? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all template ids and number of documents using each template. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all template ids and number of documents using each template. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers in ascending order of net worth. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers in ascending order of net worth. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which grade has the most high schoolers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which grade has the most high schoolers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average edispl for all volvos? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average edispl for all volvos? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: dog; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are airlines that have some flight departing from airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are airlines that have some flight departing from airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and, cvo, apg; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table continents Column ContId have values: 3; Table countries Column CountryId have values: 3; Table countries Column Continent have values: 3; Table car_makers Column Id have values: 3; Table car_makers Column Maker have values: fiat; Table car_makers Column FullName have values: fiat; Table car_makers Column Country have values: 3; Table model_list Column ModelId have values: 3; Table model_list Column Maker have values: 3; Table model_list Column Model have values: fiat; Table car_names Column MakeId have values: 3; Table car_names Column Model have values: fiat; Table cars_data Column Id have values: 3; Table cars_data Column Cylinders have values: 3; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Degree_Programs Column degree_summary_name have values: master, bachelor; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the semester when both Master students and Bachelor students got enrolled in. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the semester when both Master students and Bachelor students got enrolled in. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the number of distinct country codes of all players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the number of distinct country codes of all players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many cartoons were written by \"Joseph Kuhr\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many cartoons were written by \"Joseph Kuhr\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many continents speak Chinese? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many continents speak Chinese? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the student IDs and numbers of friends corresponding to each. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the student IDs and numbers of friends corresponding to each. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the count of the car models produced in the United States? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the count of the car models produced in the United States? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many models does each car maker produce? List maker full name, id and the number. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many models does each car maker produce? List maker full name, id and the number. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the date and id of the transcript with the least number of results? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the date and id of the transcript with the least number of results? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of visitors who did not visit any museum opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of visitors who did not visit any museum opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give me the description of the treatment type whose total cost is the lowest. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give me the description of the treatment type whose total cost is the lowest. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the makers and models? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the makers and models? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the name of the airport with code 'AKO'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the name of the airport with code 'AKO'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: are; Table country Column Code have values: are; Table countrylanguage Column CountryCode have values: are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the country codes of countries where people use languages other than English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the country codes of countries where people use languages other than English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are flight numbers of Airline \"United Airlines\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are flight numbers of Airline \"United Airlines\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: Table TV_Channel Column Language have values: english; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many TV Channels use the English language? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many TV Channels use the English language? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: and; Table country Column Code have values: and; Table country Column Code2 have values: is, in; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and maximum GNP in Asia? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and maximum GNP in Asia? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the email, cell phone and home phone of all the professionals. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the email, cell phone and home phone of all the professionals. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the id and cell phone of the professionals who operate two or more types of treatments. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the id and cell phone of the professionals who operate two or more types of treatments. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each continent and how many car makers are there in each one? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each continent and how many car makers are there in each one? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table countries Column CountryId have values: 8; Table car_makers Column Id have values: 8; Table car_makers Column Country have values: 8; Table model_list Column ModelId have values: 8; Table model_list Column Maker have values: 8; Table car_names Column MakeId have values: 8; Table cars_data Column Id have values: 8; Table cars_data Column Cylinders have values: 8; Table cars_data Column Year have values: 1974; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the smallest weight of the car produced with 8 cylinders on 1974 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the smallest weight of the car produced with 8 cylinders on 1974 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: dog, cat; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of the students who do not own cats as pets? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of the students who do not own cats as pets? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the record companies of orchestras, sorted descending by the years in which they were founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the record companies of orchestras, sorted descending by the years in which they were founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of pets whose weight is heavier than 10. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of pets whose weight is heavier than 10. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the version number and template type code for the template with version number later than 5? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the version number and template type code for the template with version number later than 5? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all template ids and number of documents using each template. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all template ids and number of documents using each template. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: are; Table city Column District have values: ; Table country Column Code have values: are; Table country Column HeadOfState have values: ; Table country Column Code2 have values: in; Table countrylanguage Column CountryCode have values: are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the African countries that have a  population less than any country in Asia? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the African countries that have a  population less than any country in Asia? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the arrival date and the departure date for all the dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the arrival date and the departure date for all the dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average age of the dogs who have gone through any treatments? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average age of the dogs who have gone through any treatments? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers and the courses they are arranged to teach. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers and the courses they are arranged to teach. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many high schoolers are in each grade? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many high schoolers are in each grade? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the email, cell phone and home phone of each professional? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the email, cell phone and home phone of each professional? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the number of concerts that occurred in the stadium with the largest capacity ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the number of concerts that occurred in the stadium with the largest capacity ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all paragraph ids and texts for the document with name 'Welcome to NY'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all paragraph ids and texts for the document with name 'Welcome to NY'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of conductors. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of conductors. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the number of airlines in the USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the number of airlines in the USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column ID have values: 3000; Table city Column CountryCode have values: and; Table country Column Code have values: and; Table country Column Code2 have values: in, to; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of distinct name of losers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of distinct name of losers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the type code of the template type that the most templates belong to. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the type code of the template type that the most templates belong to. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column ID have values: 3; Table city Column CountryCode have values: are; Table country Column Code have values: are; Table countrylanguage Column CountryCode have values: are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are names of countries with the top 3 largest population? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are names of countries with the top 3 largest population? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of poker players whose earnings is higher than 300000? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of poker players whose earnings is higher than 300000? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table continents Column ContId have values: 3; Table countries Column CountryId have values: 3; Table countries Column Continent have values: 3; Table car_makers Column Id have values: 3; Table car_makers Column Country have values: 3; Table model_list Column ModelId have values: 3; Table model_list Column Maker have values: 3; Table car_names Column MakeId have values: 3; Table cars_data Column Id have values: 3; Table cars_data Column Cylinders have values: 3; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of all European countries with at least 3 manufacturers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of all European countries with at least 3 manufacturers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table continents Column ContId have values: 3; Table countries Column CountryId have values: 3; Table countries Column Continent have values: 3; Table car_makers Column Id have values: 3; Table car_makers Column Country have values: 3; Table model_list Column ModelId have values: 3; Table model_list Column Maker have values: 3; Table car_names Column MakeId have values: 3; Table cars_data Column Id have values: 3; Table cars_data Column Cylinders have values: 3; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: battle, ship, death. \nTable 1 is battle, and its column names are: id, name, date, bulgarian_commander, latin_commander, result. \nTable 2 is ship, and its column names are: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. \nTable 3 is death, and its column names are: caused_by_ship_id, id, note, killed, injured. \nThe primary keys are: id from Table battle, id from Table ship, id from Table death.\nThe foreign keys are: lost_in_battle from Table ship is equivalent to id from Table battle, caused_by_ship_id from Table death is equivalent to id from Table ship. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different ids and names of the battles that lost any 'Brig' type shipes? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: battle, ship, death. \nTable 1 is battle, and its column names are: id, name, date, bulgarian_commander, latin_commander, result. \nTable 2 is ship, and its column names are: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. \nTable 3 is death, and its column names are: caused_by_ship_id, id, note, killed, injured. \nThe primary keys are: id from Table battle, id from Table ship, id from Table death.\nThe foreign keys are: lost_in_battle from Table ship is equivalent to id from Table battle, caused_by_ship_id from Table death is equivalent to id from Table ship. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different ids and names of the battles that lost any 'Brig' type shipes? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average ranking for each player and their first name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average ranking for each player and their first name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of all stadiums that did not have a concert in 2014? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of all stadiums that did not have a concert in 2014? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have likes, and how many likes does each have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have likes, and how many likes does each have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the singer with the largest net worth? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the singer with the largest net worth? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show different citizenship of singers and the number of singers of each citizenship. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show different citizenship of singers and the number of singers of each citizenship. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of makers of care in France? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of makers of care in France? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column last_name have values: last; Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first and last name of all players in the order of birth date. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first and last name of all players in the order of birth date. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the paragraph texts for the document with the name 'Customer reviews'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the paragraph texts for the document with the name 'Customer reviews'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of concerts happened in the stadium with the highest capacity . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of concerts happened in the stadium with the highest capacity . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: Table orchestra Column Major_Record_Format have values: dvd, cd; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of orchestras that have CD or DVD as their record format. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of orchestras that have CD or DVD as their record format. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of all the poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of all the poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model for the car with a weight smaller than the average? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model for the car with a weight smaller than the average? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which continent speaks the most languages? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which continent speaks the most languages? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of players for each hand type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of players for each hand type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the template ids with template type description \"Presentation\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the template ids with template type description \"Presentation\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which grade has the most high schoolers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which grade has the most high schoolers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the average ages of losers and winners across matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the average ages of losers and winners across matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many flights depart from 'APG'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many flights depart from 'APG'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the total number of matches. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the total number of matches. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the document id with least number of paragraphs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the document id with least number of paragraphs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column ID have values: 5; Table city Column CountryCode have values: and, are; Table country Column Code have values: and, are; Table countrylanguage Column CountryCode have values: and, are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and areas of countries with the top 5 largest area? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and areas of countries with the top 5 largest area? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the lowest grade of students who do not have any friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the lowest grade of students who do not have any friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Abbreviation have values: jetblue; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which abbreviation corresponds to Jetblue Airways? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which abbreviation corresponds to Jetblue Airways? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many car makers are there in france? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many car makers are there in france? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of people that are not poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of people that are not poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many dogs have an age below the average? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many dogs have an age below the average? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: battle, ship, death. \nTable 1 is battle, and its column names are: id, name, date, bulgarian_commander, latin_commander, result. \nTable 2 is ship, and its column names are: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. \nTable 3 is death, and its column names are: caused_by_ship_id, id, note, killed, injured. \nThe primary keys are: id from Table battle, id from Table ship, id from Table death.\nThe foreign keys are: lost_in_battle from Table ship is equivalent to id from Table battle, caused_by_ship_id from Table death is equivalent to id from Table ship. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the ship id and name that caused most total injuries? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: battle, ship, death. \nTable 1 is battle, and its column names are: id, name, date, bulgarian_commander, latin_commander, result. \nTable 2 is ship, and its column names are: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. \nTable 3 is death, and its column names are: caused_by_ship_id, id, note, killed, injured. \nThe primary keys are: id from Table battle, id from Table ship, id from Table death.\nThe foreign keys are: lost_in_battle from Table ship is equivalent to id from Table battle, caused_by_ship_id from Table death is equivalent to id from Table ship. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the ship id and name that caused most total injuries? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give average earnings of poker players who are taller than 200. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give average earnings of poker players who are taller than 200. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Templates Column Version_Number have values: 2; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of documents that have 2 or more paragraphs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of documents that have 2 or more paragraphs? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Courses Column course_name have values: math; Table Departments Column department_name have values: math; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the descriptions for all the math courses? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the descriptions for all the math courses? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and id of the department with the most number of degrees ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and id of the department with the most number of degrees ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Addresses Column address_id have values: 2; Table Courses Column course_id have values: 2; Table Departments Column department_id have values: 2; Table Departments Column department_description have values: in; Table Degree_Programs Column degree_program_id have values: 2; Table Degree_Programs Column department_id have values: 2; Table Sections Column section_id have values: 2; Table Sections Column course_id have values: 2; Table Semesters Column semester_id have values: 2; Table Students Column student_id have values: 2; Table Students Column current_address_id have values: 2; Table Student_Enrolment Column student_enrolment_id have values: 2; Table Student_Enrolment Column degree_program_id have values: 2; Table Student_Enrolment Column semester_id have values: 2; Table Student_Enrolment_Courses Column student_course_id have values: 2; Table Student_Enrolment_Courses Column course_id have values: 2; Table Student_Enrolment_Courses Column student_enrolment_id have values: 2; Table Transcripts Column transcript_id have values: 2; Table Transcript_Contents Column student_course_id have values: 2; Table Transcript_Contents Column transcript_id have values: 2; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different first names and ages of the students who do have pets? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different first names and ages of the students who do have pets? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of conductors and the orchestras they have conducted. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of conductors and the orchestras they have conducted. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the abbreviation of the airilne has the fewest flights and what country is it in? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the abbreviation of the airilne has the fewest flights and what country is it in? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many car makers are there in each continents? List the continent name and the count. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many car makers are there in each continents? List the continent name and the count. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and age of students who have a pet. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and age of students who have a pet. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: Table employee Column Age have values: 30; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which cities do more than one employee under age 30 come from? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which cities do more than one employee under age 30 come from? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the stadium names without any concert. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the stadium names without any concert. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airports do not have departing or arriving flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airports do not have departing or arriving flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: Table Charges Column charge_id have values: 1; Table Owners Column owner_id have values: 1; Table Dogs Column dog_id have values: 1; Table Dogs Column owner_id have values: 1; Table Dogs Column abandoned_yn have values: 0, 1; Table Dogs Column age have values: 1; Table Dogs Column gender have values: 0, 1; Table Professionals Column professional_id have values: 1; Table Treatments Column treatment_id have values: 1; Table Treatments Column dog_id have values: 1; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the countries that have cartoons on TV that were written by Todd Casey? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the countries that have cartoons on TV that were written by Todd Casey? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the final tables made and best finishes for all poker players? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the final tables made and best finishes for all poker players? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of car models that are produced by each maker and what is the id and full name of each maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of car models that are produced by each maker and what is the id and full name of each maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each semester, what is the name and id of the one with the most students registered? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each semester, what is the name and id of the one with the most students registered? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Abbreviation have values: jetblue; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What country is Jetblue Airways affiliated with? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What country is Jetblue Airways affiliated with? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average and maximum capacities for all stadiums ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average and maximum capacities for all stadiums ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Ref_Template_Types Column Template_Type_Code have values: pp; Table Templates Column Template_Type_Code have values: pp; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of templates with template type code PP or PPT? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the ids of templates with template type code PP or PPT? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the id of the semester that had both Masters and Bachelors students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the id of the semester that had both Masters and Bachelors students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the name of the airport with code 'AKO'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the name of the airport with code 'AKO'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many players are there for each hand type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many players are there for each hand type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the country with the most number of TV Channels and how many does it have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the country with the most number of TV Channels and how many does it have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which employee received the most awards in evaluations? Give me the employee name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which employee received the most awards in evaluations? Give me the employee name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the makers that produced some cars in the year of 1970? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the makers that produced some cars in the year of 1970? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: battle, ship, death. \nTable 1 is battle, and its column names are: id, name, date, bulgarian_commander, latin_commander, result. \nTable 2 is ship, and its column names are: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. \nTable 3 is death, and its column names are: caused_by_ship_id, id, note, killed, injured. \nThe primary keys are: id from Table battle, id from Table ship, id from Table death.\nThe foreign keys are: lost_in_battle from Table ship is equivalent to id from Table battle, caused_by_ship_id from Table death is equivalent to id from Table ship. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many different results are there for the battles? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: battle, ship, death. \nTable 1 is battle, and its column names are: id, name, date, bulgarian_commander, latin_commander, result. \nTable 2 is ship, and its column names are: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship. \nTable 3 is death, and its column names are: caused_by_ship_id, id, note, killed, injured. \nThe primary keys are: id from Table battle, id from Table ship, id from Table death.\nThe foreign keys are: lost_in_battle from Table ship is equivalent to id from Table battle, caused_by_ship_id from Table death is equivalent to id from Table ship. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many different results are there for the battles? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What's the name of the course with most number of enrollments? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What's the name of the course with most number of enrollments? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the maximum final tables made across all poker players who have earnings below 200000. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the maximum final tables made across all poker players who have earnings below 200000. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: cvo, apg; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: do, in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Departments Column department_description have values: in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: apg, cvo; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: do, in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Departments Column department_description have values: in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many total tours were there for each ranking date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many total tours were there for each ranking date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: dog; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which of the countries has the most car makers? List the country name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which of the countries has the most car makers? List the country name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: AREA_CODE_STATE, CONTESTANTS, VOTES. \nTable 1 is AREA_CODE_STATE, and its column names are: area_code, state. \nTable 2 is CONTESTANTS, and its column names are: contestant_number, contestant_name. \nTable 3 is VOTES, and its column names are: vote_id, phone_number, state, contestant_number, created. \nThe primary keys are: area_code from Table AREA_CODE_STATE, contestant_number from Table CONTESTANTS, vote_id from Table VOTES.\nThe foreign keys are: contestant_number from Table VOTES is equivalent to contestant_number from Table CONTESTANTS, state from Table VOTES is equivalent to state from Table AREA_CODE_STATE. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is last date created of votes from the state 'CA'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: AREA_CODE_STATE, CONTESTANTS, VOTES. \nTable 1 is AREA_CODE_STATE, and its column names are: area_code, state. \nTable 2 is CONTESTANTS, and its column names are: contestant_number, contestant_name. \nTable 3 is VOTES, and its column names are: vote_id, phone_number, state, contestant_number, created. \nThe primary keys are: area_code from Table AREA_CODE_STATE, contestant_number from Table CONTESTANTS, vote_id from Table VOTES.\nThe foreign keys are: contestant_number from Table VOTES is equivalent to contestant_number from Table CONTESTANTS, state from Table VOTES is equivalent to state from Table AREA_CODE_STATE. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is last date created of votes from the state 'CA'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the last name of the owner owning the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the last name of the owner owning the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the record companies of orchestras in descending order of years in which they were founded? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the record companies of orchestras in descending order of years in which they were founded? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the final tables made and the best finishes of poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the final tables made and the best finishes of poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has most number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has most number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which shops run with no employees? Find the shop names The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which shops run with no employees? Find the shop names The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the maximum weight for each type of pet. List the maximum weight and pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the maximum weight for each type of pet. List the maximum weight and pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of all players, and their total ranking points? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of all players, and their total ranking points? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinct car models are the produced after 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinct car models are the produced after 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Sort all the shops by number products in descending order, and return the name, location and district of each shop. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Sort all the shops by number products in descending order, and return the name, location and district of each shop. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table flights Column FlightNo have values: 200; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have less than 200 flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have less than 200 flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and name of the document with the most paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and name of the document with the most paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the different descriptions for templates that have been used in a document. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the different descriptions for templates that have been used in a document. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model of the car with the smallest amount of horsepower? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model of the car with the smallest amount of horsepower? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column last_name have values: date; Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first name and birth date of all players from the country with code USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first name and birth date of all players from the country with code USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the airline with abbreviation 'UAL'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the airline with abbreviation 'UAL'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight for each type of pet? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight for each type of pet? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Students Column first_name have values: timmothy; Table Students Column last_name have values: ward; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the mobile phone number of the student named Timmothy Ward ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the mobile phone number of the student named Timmothy Ward ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table car_makers Column Maker have values: amc; Table model_list Column Model have values: amc; Table car_names Column Model have values: amc; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the car accelerate that makes amc hornet sportabout (sw)? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the car accelerate that makes amc hornet sportabout (sw)? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average horsepower of the cars before 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average horsepower of the cars before 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Ref_Template_Types Column Template_Type_Code have values: ppt; Table Templates Column Template_Type_Code have values: ppt; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of documents that use the PPT template type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of documents that use the PPT template type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average rank for winners in all matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average rank for winners in all matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which year has most number of concerts? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which year has most number of concerts? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table countries Column CountryId have values: 8; Table car_makers Column Id have values: 8; Table car_makers Column Country have values: 8; Table model_list Column ModelId have values: 8; Table model_list Column Maker have values: 8; Table car_names Column MakeId have values: 8; Table cars_data Column Id have values: 8; Table cars_data Column Cylinders have values: 8; Table cars_data Column Weight have values: 1980; Table cars_data Column Year have values: 1980; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all countries and the number of singers in each country. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all countries and the number of singers in each country. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: are; Table country Column Code have values: are; Table countrylanguage Column CountryCode have values: are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many countries have governments that are republics? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many countries have governments that are republics? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and, apg, cvo; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of cartoones written by Joseph Kuhr? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of cartoones written by Joseph Kuhr? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Please show the most common citizenship of singers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Please show the most common citizenship of singers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all the grades of the high schoolers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all the grades of the high schoolers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: Table singer Column Song_release_year have values: 2014; Table concert Column Year have values: 2014; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose courses have not been arranged? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose courses have not been arranged? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the name of the countries where there is not a single car maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the name of the countries where there is not a single car maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of employees The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of employees The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of employees hired in each shop; show the shop name as well. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of employees hired in each shop; show the shop name as well. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each language, list the number of TV Channels that use it. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each language, list the number of TV Channels that use it. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the singers and number of concerts for each person? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the singers and number of concerts for each person? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each teacher and what course they teach? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each teacher and what course they teach? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: cat; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: and; Table country Column Code have values: and; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of cities that have a population between 160000 and 900000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of cities that have a population between 160000 and 900000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column ID have values: 3000; Table city Column CountryCode have values: and; Table country Column Code have values: and; Table country Column Code2 have values: in, is; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the money rank of the poker player with the greatest height. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the money rank of the poker player with the greatest height. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Addresses Column address_id have values: 2; Table Courses Column course_id have values: 2; Table Departments Column department_id have values: 2; Table Degree_Programs Column degree_program_id have values: 2; Table Degree_Programs Column department_id have values: 2; Table Sections Column section_id have values: 2; Table Sections Column course_id have values: 2; Table Semesters Column semester_id have values: 2; Table Students Column student_id have values: 2; Table Students Column current_address_id have values: 2; Table Student_Enrolment Column student_enrolment_id have values: 2; Table Student_Enrolment Column degree_program_id have values: 2; Table Student_Enrolment Column semester_id have values: 2; Table Student_Enrolment_Courses Column student_course_id have values: 2; Table Student_Enrolment_Courses Column course_id have values: 2; Table Student_Enrolment_Courses Column student_enrolment_id have values: 2; Table Transcripts Column transcript_id have values: 2; Table Transcript_Contents Column student_course_id have values: 2; Table Transcript_Contents Column transcript_id have values: 2; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and id of courses having at most 2 sections? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and id of courses having at most 2 sections? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of distinct store locations. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of distinct store locations. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of all of the high schooler Kyle's friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of all of the high schooler Kyle's friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of poker players sorted by their earnings descending. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of poker players sorted by their earnings descending. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the record company used by the greatest number of orchestras? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the record company used by the greatest number of orchestras? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find id of the tv channels that from the countries where have more than two tv channels. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find id of the tv channels that from the countries where have more than two tv channels. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total count of teachers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total count of teachers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has abbreviation 'UAL'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has abbreviation 'UAL'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many singers are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many singers are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table continents Column ContId have values: 3; Table countries Column CountryId have values: 3; Table countries Column Continent have values: 3; Table car_makers Column Id have values: 3; Table car_makers Column Country have values: 3; Table model_list Column ModelId have values: 3; Table model_list Column Maker have values: 3; Table car_names Column MakeId have values: 3; Table cars_data Column Id have values: 3; Table cars_data Column Cylinders have values: 3; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the years in which orchestras that have given more than one performance are founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the years in which orchestras that have given more than one performance are founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many degrees does the engineering department offer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many degrees does the engineering department offer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers that do not have any song. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers that do not have any song. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the id of tv channels that do not play any cartoon directed by Ben Jones. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the id of tv channels that do not play any cartoon directed by Ben Jones. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the flight numbers of flights landing at APG. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the flight numbers of flights landing at APG. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: by, is; Table countrylanguage Column Language have values: spanish; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total number of countries where Spanish is spoken by the largest percentage of people? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total number of countries where Spanish is spoken by the largest percentage of people? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: do, in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many people live in countries that do not speak English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many people live in countries that do not speak English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table car_makers Column Maker have values: ford; Table model_list Column Model have values: ford; Table car_names Column Model have values: ford; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: Table Highschooler Column name have values: kyle; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many friends does the high school student Kyle have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many friends does the high school student Kyle have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: Table museum Column Open_Year have values: 2009; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: dog, cat; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of conductors whose nationalities are not \"USA\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of conductors whose nationalities are not \"USA\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: cvo, apg; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: in, do; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Departments Column department_description have values: in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many total tours were there for each ranking date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many total tours were there for each ranking date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: dog; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which of the countries has the most car makers? List the country name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which of the countries has the most car makers? List the country name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: AREA_CODE_STATE, CONTESTANTS, VOTES. \nTable 1 is AREA_CODE_STATE, and its column names are: area_code, state. \nTable 2 is CONTESTANTS, and its column names are: contestant_number, contestant_name. \nTable 3 is VOTES, and its column names are: vote_id, phone_number, state, contestant_number, created. \nThe primary keys are: area_code from Table AREA_CODE_STATE, contestant_number from Table CONTESTANTS, vote_id from Table VOTES.\nThe foreign keys are: contestant_number from Table VOTES is equivalent to contestant_number from Table CONTESTANTS, state from Table VOTES is equivalent to state from Table AREA_CODE_STATE. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is last date created of votes from the state 'CA'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: AREA_CODE_STATE, CONTESTANTS, VOTES. \nTable 1 is AREA_CODE_STATE, and its column names are: area_code, state. \nTable 2 is CONTESTANTS, and its column names are: contestant_number, contestant_name. \nTable 3 is VOTES, and its column names are: vote_id, phone_number, state, contestant_number, created. \nThe primary keys are: area_code from Table AREA_CODE_STATE, contestant_number from Table CONTESTANTS, vote_id from Table VOTES.\nThe foreign keys are: contestant_number from Table VOTES is equivalent to contestant_number from Table CONTESTANTS, state from Table VOTES is equivalent to state from Table AREA_CODE_STATE. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is last date created of votes from the state 'CA'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the last name of the owner owning the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the last name of the owner owning the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the record companies of orchestras in descending order of years in which they were founded? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the record companies of orchestras in descending order of years in which they were founded? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the final tables made and the best finishes of poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the final tables made and the best finishes of poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has most number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has most number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which shops run with no employees? Find the shop names The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which shops run with no employees? Find the shop names The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the maximum weight for each type of pet. List the maximum weight and pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the maximum weight for each type of pet. List the maximum weight and pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of all players, and their total ranking points? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of all players, and their total ranking points? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinct car models are the produced after 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinct car models are the produced after 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Sort all the shops by number products in descending order, and return the name, location and district of each shop. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Sort all the shops by number products in descending order, and return the name, location and district of each shop. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table flights Column FlightNo have values: 200; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have less than 200 flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have less than 200 flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and name of the document with the most paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and name of the document with the most paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the different descriptions for templates that have been used in a document. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the different descriptions for templates that have been used in a document. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model of the car with the smallest amount of horsepower? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model of the car with the smallest amount of horsepower? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column last_name have values: date; Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first name and birth date of all players from the country with code USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first name and birth date of all players from the country with code USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the airline with abbreviation 'UAL'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the airline with abbreviation 'UAL'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight for each type of pet? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight for each type of pet? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Students Column first_name have values: timmothy; Table Students Column last_name have values: ward; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the mobile phone number of the student named Timmothy Ward ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the mobile phone number of the student named Timmothy Ward ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table car_makers Column Maker have values: amc; Table model_list Column Model have values: amc; Table car_names Column Model have values: amc; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the car accelerate that makes amc hornet sportabout (sw)? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the car accelerate that makes amc hornet sportabout (sw)? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average horsepower of the cars before 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average horsepower of the cars before 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Ref_Template_Types Column Template_Type_Code have values: ppt; Table Templates Column Template_Type_Code have values: ppt; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of documents that use the PPT template type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of documents that use the PPT template type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average rank for winners in all matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average rank for winners in all matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which year has most number of concerts? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which year has most number of concerts? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table countries Column CountryId have values: 8; Table car_makers Column Id have values: 8; Table car_makers Column Country have values: 8; Table model_list Column ModelId have values: 8; Table model_list Column Maker have values: 8; Table car_names Column MakeId have values: 8; Table cars_data Column Id have values: 8; Table cars_data Column Cylinders have values: 8; Table cars_data Column Weight have values: 1980; Table cars_data Column Year have values: 1980; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all countries and the number of singers in each country. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all countries and the number of singers in each country. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: are; Table country Column Code have values: are; Table countrylanguage Column CountryCode have values: are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many countries have governments that are republics? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many countries have governments that are republics? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: cvo, apg, and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of cartoones written by Joseph Kuhr? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of cartoones written by Joseph Kuhr? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Please show the most common citizenship of singers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Please show the most common citizenship of singers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all the grades of the high schoolers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all the grades of the high schoolers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: Table singer Column Song_release_year have values: 2014; Table concert Column Year have values: 2014; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose courses have not been arranged? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose courses have not been arranged? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the name of the countries where there is not a single car maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the name of the countries where there is not a single car maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of employees The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of employees The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of employees hired in each shop; show the shop name as well. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of employees hired in each shop; show the shop name as well. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each language, list the number of TV Channels that use it. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each language, list the number of TV Channels that use it. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the singers and number of concerts for each person? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the singers and number of concerts for each person? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each teacher and what course they teach? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each teacher and what course they teach? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: cat; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: and; Table country Column Code have values: and; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of cities that have a population between 160000 and 900000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of cities that have a population between 160000 and 900000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column ID have values: 3000; Table city Column CountryCode have values: and; Table country Column Code have values: and; Table country Column Code2 have values: in, is; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the money rank of the poker player with the greatest height. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the money rank of the poker player with the greatest height. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Addresses Column address_id have values: 2; Table Courses Column course_id have values: 2; Table Departments Column department_id have values: 2; Table Degree_Programs Column degree_program_id have values: 2; Table Degree_Programs Column department_id have values: 2; Table Sections Column section_id have values: 2; Table Sections Column course_id have values: 2; Table Semesters Column semester_id have values: 2; Table Students Column student_id have values: 2; Table Students Column current_address_id have values: 2; Table Student_Enrolment Column student_enrolment_id have values: 2; Table Student_Enrolment Column degree_program_id have values: 2; Table Student_Enrolment Column semester_id have values: 2; Table Student_Enrolment_Courses Column student_course_id have values: 2; Table Student_Enrolment_Courses Column course_id have values: 2; Table Student_Enrolment_Courses Column student_enrolment_id have values: 2; Table Transcripts Column transcript_id have values: 2; Table Transcript_Contents Column student_course_id have values: 2; Table Transcript_Contents Column transcript_id have values: 2; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and id of courses having at most 2 sections? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and id of courses having at most 2 sections? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of distinct store locations. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of distinct store locations. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of all of the high schooler Kyle's friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of all of the high schooler Kyle's friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of poker players sorted by their earnings descending. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of poker players sorted by their earnings descending. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the record company used by the greatest number of orchestras? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the record company used by the greatest number of orchestras? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find id of the tv channels that from the countries where have more than two tv channels. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find id of the tv channels that from the countries where have more than two tv channels. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total count of teachers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total count of teachers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has abbreviation 'UAL'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has abbreviation 'UAL'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many singers are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many singers are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table continents Column ContId have values: 3; Table countries Column CountryId have values: 3; Table countries Column Continent have values: 3; Table car_makers Column Id have values: 3; Table car_makers Column Country have values: 3; Table model_list Column ModelId have values: 3; Table model_list Column Maker have values: 3; Table car_names Column MakeId have values: 3; Table cars_data Column Id have values: 3; Table cars_data Column Cylinders have values: 3; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the years in which orchestras that have given more than one performance are founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the years in which orchestras that have given more than one performance are founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many degrees does the engineering department offer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many degrees does the engineering department offer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers that do not have any song. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers that do not have any song. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the id of tv channels that do not play any cartoon directed by Ben Jones. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the id of tv channels that do not play any cartoon directed by Ben Jones. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the flight numbers of flights landing at APG. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the flight numbers of flights landing at APG. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: by, is; Table countrylanguage Column Language have values: spanish; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total number of countries where Spanish is spoken by the largest percentage of people? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total number of countries where Spanish is spoken by the largest percentage of people? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: in, do; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many people live in countries that do not speak English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many people live in countries that do not speak English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table car_makers Column Maker have values: ford; Table model_list Column Model have values: ford; Table car_names Column Model have values: ford; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: Table Highschooler Column name have values: kyle; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many friends does the high school student Kyle have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many friends does the high school student Kyle have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: Table museum Column Open_Year have values: 2009; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: cat, dog; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of conductors whose nationalities are not \"USA\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of conductors whose nationalities are not \"USA\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: apg, cvo; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of students who have no friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many employees are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the owner id, first name and last name of the owner who has the most dogs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: in, do; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much surface area do the countires in the Carribean cover together? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name and directors of all the cartoons that are ordered by air date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the model of the car whose weight is below the average weight. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of dogs of an age below the average. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight and year for each year? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the average weight for each pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Departments Column department_description have values: in; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different template type codes, and how many documents use each type? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show names of teachers that teach at least two courses. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the template type code for template type description \"Book\". The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many total tours were there for each ranking date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many total tours were there for each ranking date? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: dog; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the youngest dog weigh? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which of the countries has the most car makers? List the country name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which of the countries has the most car makers? List the country name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: AREA_CODE_STATE, CONTESTANTS, VOTES. \nTable 1 is AREA_CODE_STATE, and its column names are: area_code, state. \nTable 2 is CONTESTANTS, and its column names are: contestant_number, contestant_name. \nTable 3 is VOTES, and its column names are: vote_id, phone_number, state, contestant_number, created. \nThe primary keys are: area_code from Table AREA_CODE_STATE, contestant_number from Table CONTESTANTS, vote_id from Table VOTES.\nThe foreign keys are: contestant_number from Table VOTES is equivalent to contestant_number from Table CONTESTANTS, state from Table VOTES is equivalent to state from Table AREA_CODE_STATE. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is last date created of votes from the state 'CA'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: AREA_CODE_STATE, CONTESTANTS, VOTES. \nTable 1 is AREA_CODE_STATE, and its column names are: area_code, state. \nTable 2 is CONTESTANTS, and its column names are: contestant_number, contestant_name. \nTable 3 is VOTES, and its column names are: vote_id, phone_number, state, contestant_number, created. \nThe primary keys are: area_code from Table AREA_CODE_STATE, contestant_number from Table CONTESTANTS, vote_id from Table VOTES.\nThe foreign keys are: contestant_number from Table VOTES is equivalent to contestant_number from Table CONTESTANTS, state from Table VOTES is equivalent to state from Table AREA_CODE_STATE. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is last date created of votes from the state 'CA'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the last name of the owner owning the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the last name of the owner owning the youngest dog. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the record companies of orchestras in descending order of years in which they were founded? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the record companies of orchestras in descending order of years in which they were founded? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the final tables made and the best finishes of poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the final tables made and the best finishes of poker players. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has most number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has most number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which shops run with no employees? Find the shop names The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which shops run with no employees? Find the shop names The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the maximum weight for each type of pet. List the maximum weight and pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the maximum weight for each type of pet. List the maximum weight and pet type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the names of the dogs of the rarest breed and the treatment dates of them. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of all players, and their total ranking points? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the first names of all players, and their total ranking points? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinct car models are the produced after 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinct car models are the produced after 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Sort all the shops by number products in descending order, and return the name, location and district of each shop. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Sort all the shops by number products in descending order, and return the name, location and district of each shop. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table flights Column FlightNo have values: 200; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have less than 200 flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have less than 200 flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and name of the document with the most paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the id and name of the document with the most paragraphs. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the different descriptions for templates that have been used in a document. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the different descriptions for templates that have been used in a document. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model of the car with the smallest amount of horsepower? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the model of the car with the smallest amount of horsepower? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column last_name have values: date; Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first name and birth date of all players from the country with code USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the first name and birth date of all players from the country with code USA. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the airline with abbreviation 'UAL'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the airline with abbreviation 'UAL'. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight for each type of pet? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average weight for each type of pet? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Students Column first_name have values: timmothy; Table Students Column last_name have values: ward; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the mobile phone number of the student named Timmothy Ward ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the mobile phone number of the student named Timmothy Ward ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table car_makers Column Maker have values: amc; Table model_list Column Model have values: amc; Table car_names Column Model have values: amc; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the car accelerate that makes amc hornet sportabout (sw)? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How much does the car accelerate that makes amc hornet sportabout (sw)? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average horsepower of the cars before 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average horsepower of the cars before 1980? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Ref_Template_Types Column Template_Type_Code have values: ppt; Table Templates Column Template_Type_Code have values: ppt; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of documents that use the PPT template type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of documents that use the PPT template type. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: Table players Column country_code have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name and country code of the player who did the most number of tours. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average rank for winners in all matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: players, matches, rankings. \nTable 1 is players, and its column names are: player_id, first_name, last_name, hand, birth_date, country_code. \nTable 2 is matches, and its column names are: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year. \nTable 3 is rankings, and its column names are: ranking_date, ranking, player_id, ranking_points, tours. \nThe primary keys are: player_id from Table players.\nThe foreign keys are: winner_id from Table matches is equivalent to player_id from Table players, loser_id from Table matches is equivalent to player_id from Table players, player_id from Table rankings is equivalent to player_id from Table players. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average rank for winners in all matches? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which year has most number of concerts? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which year has most number of concerts? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table countries Column CountryId have values: 8; Table car_makers Column Id have values: 8; Table car_makers Column Country have values: 8; Table model_list Column ModelId have values: 8; Table model_list Column Maker have values: 8; Table car_names Column MakeId have values: 8; Table cars_data Column Id have values: 8; Table cars_data Column Cylinders have values: 8; Table cars_data Column Weight have values: 1980; Table cars_data Column Year have values: 1980; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all countries and the number of singers in each country. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all countries and the number of singers in each country. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: are; Table country Column Code have values: are; Table countrylanguage Column CountryCode have values: are; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many countries have governments that are republics? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many countries have governments that are republics? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and, apg, cvo; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departing flights from both APG and CVO airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of cartoones written by Joseph Kuhr? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the number of cartoones written by Joseph Kuhr? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Please show the most common citizenship of singers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Please show the most common citizenship of singers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all the grades of the high schoolers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show all the grades of the high schoolers. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: Table singer Column Song_release_year have values: 2014; Table concert Column Year have values: 2014; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose courses have not been arranged? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the teachers whose courses have not been arranged? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the name of the countries where there is not a single car maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the name of the countries where there is not a single car maker? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of employees The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of employees The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of employees hired in each shop; show the shop name as well. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the number of employees hired in each shop; show the shop name as well. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each language, list the number of TV Channels that use it. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: For each language, list the number of TV Channels that use it. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the singers and number of concerts for each person? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: stadium, singer, concert, singer_in_concert. \nTable 1 is stadium, and its column names are: Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average. \nTable 2 is singer, and its column names are: Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male. \nTable 3 is concert, and its column names are: concert_ID, concert_Name, Theme, Stadium_ID, Year. \nTable 4 is singer_in_concert, and its column names are: concert_ID, Singer_ID. \nThe primary keys are: Stadium_ID from Table stadium, Singer_ID from Table singer, concert_ID from Table concert, concert_ID from Table singer_in_concert.\nThe foreign keys are: Stadium_ID from Table concert is equivalent to Stadium_ID from Table stadium, Singer_ID from Table singer_in_concert is equivalent to Singer_ID from Table singer, concert_ID from Table singer_in_concert is equivalent to concert_ID from Table concert. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of the singers and number of concerts for each person? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each teacher and what course they teach? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of each teacher and what course they teach? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Who is the first student to register? List the first name, middle name and last name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: cat; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What major is every student who does not own a cat as a pet, and also how old are they? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which city and country is the Alton airport at? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column CountryCode have values: and; Table country Column Code have values: and; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of cities that have a population between 160000 and 900000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of cities that have a population between 160000 and 900000 . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table city Column ID have values: 3000; Table city Column CountryCode have values: and; Table country Column Code have values: and; Table country Column Code2 have values: is, in; Table countrylanguage Column CountryCode have values: and; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the date of the transcript which shows the least number of results, also list the id. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the money rank of the poker player with the greatest height. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the money rank of the poker player with the greatest height. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: Table Addresses Column address_id have values: 2; Table Courses Column course_id have values: 2; Table Departments Column department_id have values: 2; Table Degree_Programs Column degree_program_id have values: 2; Table Degree_Programs Column department_id have values: 2; Table Sections Column section_id have values: 2; Table Sections Column course_id have values: 2; Table Semesters Column semester_id have values: 2; Table Students Column student_id have values: 2; Table Students Column current_address_id have values: 2; Table Student_Enrolment Column student_enrolment_id have values: 2; Table Student_Enrolment Column degree_program_id have values: 2; Table Student_Enrolment Column semester_id have values: 2; Table Student_Enrolment_Courses Column student_course_id have values: 2; Table Student_Enrolment_Courses Column course_id have values: 2; Table Student_Enrolment_Courses Column student_enrolment_id have values: 2; Table Transcripts Column transcript_id have values: 2; Table Transcript_Contents Column student_course_id have values: 2; Table Transcript_Contents Column transcript_id have values: 2; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and id of courses having at most 2 sections? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names and id of courses having at most 2 sections? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of distinct store locations. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Count the number of distinct store locations. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of all of the high schooler Kyle's friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the names of all of the high schooler Kyle's friends. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of poker players sorted by their earnings descending. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: poker_player, people. \nTable 1 is poker_player, and its column names are: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings. \nTable 2 is people, and its column names are: People_ID, Nationality, Name, Birth_Date, Height. \nThe primary keys are: Poker_Player_ID from Table poker_player, People_ID from Table people.\nThe foreign keys are: People_ID from Table poker_player is equivalent to People_ID from Table people. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the names of poker players sorted by their earnings descending. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the degree summary name that has the most number of students enrolled? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are all the possible breed type and size type combinations? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the record company used by the greatest number of orchestras? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the record company used by the greatest number of orchestras? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find id of the tv channels that from the countries where have more than two tv channels. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find id of the tv channels that from the countries where have more than two tv channels. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total count of teachers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: course, teacher, course_arrange. \nTable 1 is course, and its column names are: Course_ID, Staring_Date, Course. \nTable 2 is teacher, and its column names are: Teacher_ID, Name, Age, Hometown. \nTable 3 is course_arrange, and its column names are: Course_ID, Teacher_ID, Grade. \nThe primary keys are: Course_ID from Table course, Teacher_ID from Table teacher, Course_ID from Table course_arrange.\nThe foreign keys are: Teacher_ID from Table course_arrange is equivalent to Teacher_ID from Table teacher, Course_ID from Table course_arrange is equivalent to Course_ID from Table course. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total count of teachers? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has abbreviation 'UAL'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airline has abbreviation 'UAL'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many singers are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many singers are there? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table continents Column ContId have values: 3; Table countries Column CountryId have values: 3; Table countries Column Continent have values: 3; Table car_makers Column Id have values: 3; Table car_makers Column Country have values: 3; Table model_list Column ModelId have values: 3; Table model_list Column Maker have values: 3; Table car_names Column MakeId have values: 3; Table cars_data Column Id have values: 3; Table cars_data Column Cylinders have values: 3; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the years in which orchestras that have given more than one performance are founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Show the years in which orchestras that have given more than one performance are founded. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many degrees does the engineering department offer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 11 tables. Their titles are: Addresses, Courses, Departments, Degree_Programs, Sections, Semesters, Students, Student_Enrolment, Student_Enrolment_Courses, Transcripts, Transcript_Contents. \nTable 1 is Addresses, and its column names are: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details. \nTable 2 is Courses, and its column names are: course_id, course_name, course_description, other_details. \nTable 3 is Departments, and its column names are: department_id, department_name, department_description, other_details. \nTable 4 is Degree_Programs, and its column names are: degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details. \nTable 5 is Sections, and its column names are: section_id, course_id, section_name, section_description, other_details. \nTable 6 is Semesters, and its column names are: semester_id, semester_name, semester_description, other_details. \nTable 7 is Students, and its column names are: student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details. \nTable 8 is Student_Enrolment, and its column names are: student_enrolment_id, degree_program_id, semester_id, student_id, other_details. \nTable 9 is Student_Enrolment_Courses, and its column names are: student_course_id, course_id, student_enrolment_id. \nTable 10 is Transcripts, and its column names are: transcript_id, transcript_date, other_details. \nTable 11 is Transcript_Contents, and its column names are: student_course_id, transcript_id. \nThe primary keys are: address_id from Table Addresses, course_id from Table Courses, department_id from Table Departments, degree_program_id from Table Degree_Programs, section_id from Table Sections, semester_id from Table Semesters, student_id from Table Students, student_enrolment_id from Table Student_Enrolment, student_course_id from Table Student_Enrolment_Courses, transcript_id from Table Transcripts.\nThe foreign keys are: department_id from Table Degree_Programs is equivalent to department_id from Table Departments, course_id from Table Sections is equivalent to course_id from Table Courses, permanent_address_id from Table Students is equivalent to address_id from Table Addresses, current_address_id from Table Students is equivalent to address_id from Table Addresses, student_id from Table Student_Enrolment is equivalent to student_id from Table Students, semester_id from Table Student_Enrolment is equivalent to semester_id from Table Semesters, degree_program_id from Table Student_Enrolment is equivalent to degree_program_id from Table Degree_Programs, student_enrolment_id from Table Student_Enrolment_Courses is equivalent to student_enrolment_id from Table Student_Enrolment, course_id from Table Student_Enrolment_Courses is equivalent to course_id from Table Courses, transcript_id from Table Transcript_Contents is equivalent to transcript_id from Table Transcripts, student_course_id from Table Transcript_Contents is equivalent to student_course_id from Table Student_Enrolment_Courses. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many degrees does the engineering department offer? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers that do not have any song. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 2 tables. Their titles are: singer, song. \nTable 1 is singer, and its column names are: Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship. \nTable 2 is song, and its column names are: Song_ID, Title, Singer_ID, Sales, Highest_Position. \nThe primary keys are: Singer_ID from Table singer, Song_ID from Table song.\nThe foreign keys are: Singer_ID from Table song is equivalent to Singer_ID from Table singer. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the name of singers that do not have any song. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the id of tv channels that do not play any cartoon directed by Ben Jones. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: TV_Channel, TV_series, Cartoon. \nTable 1 is TV_Channel, and its column names are: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option. \nTable 2 is TV_series, and its column names are: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel. \nTable 3 is Cartoon, and its column names are: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel. \nThe primary keys are: id from Table TV_Channel, id from Table TV_series, id from Table Cartoon.\nThe foreign keys are: Channel from Table TV_series is equivalent to id from Table TV_Channel, Channel from Table Cartoon is equivalent to id from Table TV_Channel. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the id of tv channels that do not play any cartoon directed by Ben Jones. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the flight numbers of flights landing at APG. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Give the flight numbers of flights landing at APG. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: is, by; Table countrylanguage Column Language have values: spanish; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total number of countries where Spanish is spoken by the largest percentage of people? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the total number of countries where Spanish is spoken by the largest percentage of people? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. Columns with relevant values: Table country Column Code2 have values: in, do; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many people live in countries that do not speak English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: city, sqlite_sequence, country, countrylanguage. \nTable 1 is city, and its column names are: ID, Name, CountryCode, District, Population. \nTable 2 is sqlite_sequence, and its column names are: name, seq. \nTable 3 is country, and its column names are: Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2. \nTable 4 is countrylanguage, and its column names are: CountryCode, Language, IsOfficial, Percentage. \nThe primary keys are: ID from Table city, Code from Table country, CountryCode from Table countrylanguage.\nThe foreign keys are: CountryCode from Table city is equivalent to Code from Table country, CountryCode from Table countrylanguage is equivalent to Code from Table country. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many people live in countries that do not speak English? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: Table car_makers Column Maker have values: ford; Table model_list Column Model have values: ford; Table car_names Column Model have values: ford; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: Table Highschooler Column name have values: kyle; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many friends does the high school student Kyle have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many friends does the high school student Kyle have? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. Columns with relevant values: Table museum Column Open_Year have values: 2009; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: museum, visitor, visit. \nTable 1 is museum, and its column names are: Museum_ID, Name, Num_of_Staff, Open_Year. \nTable 2 is visitor, and its column names are: ID, Name, Level_of_membership, Age. \nTable 3 is visit, and its column names are: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent. \nThe primary keys are: Museum_ID from Table museum, ID from Table visitor, Museum_ID from Table visit.\nThe foreign keys are: visitor_ID from Table visit is equivalent to ID from Table visitor, Museum_ID from Table visit is equivalent to Museum_ID from Table museum. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: Table Pets Column PetType have values: cat, dog; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the first name of students who have both cat and dog pets . The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of conductors whose nationalities are not \"USA\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: conductor, orchestra, performance, show. \nTable 1 is conductor, and its column names are: Conductor_ID, Name, Age, Nationality, Year_of_Work. \nTable 2 is orchestra, and its column names are: Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format. \nTable 3 is performance, and its column names are: Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share. \nTable 4 is show, and its column names are: Show_ID, Performance_ID, If_first_show, Result, Attendance. \nThe primary keys are: Conductor_ID from Table conductor, Orchestra_ID from Table orchestra, Performance_ID from Table performance.\nThe foreign keys are: Conductor_ID from Table orchestra is equivalent to Conductor_ID from Table conductor, Orchestra_ID from Table performance is equivalent to Orchestra_ID from Table orchestra, Performance_ID from Table show is equivalent to Performance_ID from Table performance. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of conductors whose nationalities are not \"USA\"? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: cvo, apg; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Airline have values: United Airlines; Table airports Column AirportCode have values: AHD; Table flights Column SourceAirport have values: AHD; Table flights Column DestAirport have values: AHD; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Documents Column Document_Name have values: Data base; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: APG, CVO; Table flights Column SourceAirport have values: APG, CVO; Table flights Column DestAirport have values: APG, CVO; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Airline have values: United Airlines; Table airports Column AirportCode have values: AHD; Table flights Column SourceAirport have values: AHD; Table flights Column DestAirport have values: AHD; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Documents Column Document_Name have values: Data base; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: APG, CVO; Table flights Column SourceAirport have values: APG, CVO; Table flights Column DestAirport have values: APG, CVO; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Airline have values: United Airlines; Table airports Column AirportCode have values: AHD; Table flights Column SourceAirport have values: AHD; Table flights Column DestAirport have values: AHD; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Documents Column Document_Name have values: Data base; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: APG, CVO; Table flights Column SourceAirport have values: APG, CVO; Table flights Column DestAirport have values: APG, CVO; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Airline have values: United Airlines; Table airports Column AirportCode have values: AHD; Table flights Column SourceAirport have values: AHD; Table flights Column DestAirport have values: AHD; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Documents Column Document_Name have values: Data base; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: APG, CVO; Table flights Column SourceAirport have values: APG, CVO; Table flights Column DestAirport have values: APG, CVO; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Airline have values: United Airlines; Table airports Column AirportCode have values: AHD; Table flights Column SourceAirport have values: AHD; Table flights Column DestAirport have values: AHD; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Documents Column Document_Name have values: Data base; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: APG, CVO; Table flights Column SourceAirport have values: APG, CVO; Table flights Column DestAirport have values: APG, CVO; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airlines Column Airline have values: United Airlines; Table airports Column AirportCode have values: AHD; Table flights Column SourceAirport have values: AHD; Table flights Column DestAirport have values: AHD; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: How many 'United Airlines' flights depart from Airport 'AHD'? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 6 tables. Their titles are: continents, countries, car_makers, model_list, car_names, cars_data. \nTable 1 is continents, and its column names are: ContId, Continent. \nTable 2 is countries, and its column names are: CountryId, CountryName, Continent. \nTable 3 is car_makers, and its column names are: Id, Maker, FullName, Country. \nTable 4 is model_list, and its column names are: ModelId, Maker, Model. \nTable 5 is car_names, and its column names are: MakeId, Model, Make. \nTable 6 is cars_data, and its column names are: Id, MPG, Cylinders, Edispl, Horsepower, Weight, Accelerate, Year. \nThe primary keys are: ContId from Table continents, CountryId from Table countries, Id from Table car_makers, ModelId from Table model_list, MakeId from Table car_names, Id from Table cars_data.\nThe foreign keys are: Continent from Table countries is equivalent to ContId from Table continents, Country from Table car_makers is equivalent to CountryId from Table countries, Maker from Table model_list is equivalent to Id from Table car_makers, Model from Table car_names is equivalent to Model from Table model_list, Id from Table cars_data is equivalent to MakeId from Table car_names. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Highschooler, Friend, Likes. \nTable 1 is Highschooler, and its column names are: ID, name, grade. \nTable 2 is Friend, and its column names are: student_id, friend_id. \nTable 3 is Likes, and its column names are: student_id, liked_id. \nThe primary keys are: ID from Table Highschooler, student_id from Table Friend, student_id from Table Likes.\nThe foreign keys are: friend_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Friend is equivalent to ID from Table Highschooler, student_id from Table Likes is equivalent to ID from Table Highschooler, liked_id from Table Likes is equivalent to ID from Table Highschooler. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 8 tables. Their titles are: Breeds, Charges, Sizes, Treatment_Types, Owners, Dogs, Professionals, Treatments. \nTable 1 is Breeds, and its column names are: breed_code, breed_name. \nTable 2 is Charges, and its column names are: charge_id, charge_type, charge_amount. \nTable 3 is Sizes, and its column names are: size_code, size_description. \nTable 4 is Treatment_Types, and its column names are: treatment_type_code, treatment_type_description. \nTable 5 is Owners, and its column names are: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number. \nTable 6 is Dogs, and its column names are: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed. \nTable 7 is Professionals, and its column names are: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number. \nTable 8 is Treatments, and its column names are: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment. \nThe primary keys are: breed_code from Table Breeds, charge_id from Table Charges, size_code from Table Sizes, treatment_type_code from Table Treatment_Types, owner_id from Table Owners, dog_id from Table Dogs, professional_id from Table Professionals, treatment_id from Table Treatments.\nThe foreign keys are: owner_id from Table Dogs is equivalent to owner_id from Table Owners, owner_id from Table Dogs is equivalent to owner_id from Table Owners, size_code from Table Dogs is equivalent to size_code from Table Sizes, breed_code from Table Dogs is equivalent to breed_code from Table Breeds, dog_id from Table Treatments is equivalent to dog_id from Table Dogs, professional_id from Table Treatments is equivalent to professional_id from Table Professionals, treatment_type_code from Table Treatments is equivalent to treatment_type_code from Table Treatment_Types. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: List the cost of each treatment and the corresponding treatment type description. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: Ref_Template_Types, Templates, Documents, Paragraphs. \nTable 1 is Ref_Template_Types, and its column names are: Template_Type_Code, Template_Type_Description. \nTable 2 is Templates, and its column names are: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details. \nTable 3 is Documents, and its column names are: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details. \nTable 4 is Paragraphs, and its column names are: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details. \nThe primary keys are: Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Templates, Document_ID from Table Documents, Paragraph_ID from Table Paragraphs.\nThe foreign keys are: Template_Type_Code from Table Templates is equivalent to Template_Type_Code from Table Ref_Template_Types, Template_ID from Table Documents is equivalent to Template_ID from Table Templates, Document_ID from Table Paragraphs is equivalent to Document_ID from Table Documents. Use foreign keys to join Tables. Columns with relevant values: Table Documents Column Document_Name have values: Data base; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Return the template type code of the template that is used by a document named Data base. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: Table airports Column AirportCode have values: APG, CVO; Table flights Column SourceAirport have values: APG, CVO; Table flights Column DestAirport have values: APG, CVO; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Which airlines have departures from CVO but not from APG airports? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 4 tables. Their titles are: employee, shop, hiring, evaluation. \nTable 1 is employee, and its column names are: Employee_ID, Name, Age, City. \nTable 2 is shop, and its column names are: Shop_ID, Name, Location, District, Number_products, Manager_name. \nTable 3 is hiring, and its column names are: Shop_ID, Employee_ID, Start_from, Is_full_time. \nTable 4 is evaluation, and its column names are: Employee_ID, Year_awarded, Bonus. \nThe primary keys are: Employee_ID from Table employee, Shop_ID from Table shop, Employee_ID from Table hiring, Employee_ID from Table evaluation.\nThe foreign keys are: Employee_ID from Table hiring is equivalent to Employee_ID from Table employee, Shop_ID from Table hiring is equivalent to Shop_ID from Table shop, Employee_ID from Table evaluation is equivalent to Employee_ID from Table employee. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: Find the names of employees who never won any award in the evaluation. The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: airlines, airports, flights. \nTable 1 is airlines, and its column names are: uid, Airline, Abbreviation, Country. \nTable 2 is airports, and its column names are: City, AirportCode, AirportName, Country, CountryAbbrev. \nTable 3 is flights, and its column names are: Airline, FlightNo, SourceAirport, DestAirport. \nThe primary keys are: uid from Table airlines, AirportCode from Table airports, Airline from Table flights.\nThe foreign keys are: DestAirport from Table flights is equivalent to AirportCode from Table airports, SourceAirport from Table flights is equivalent to AirportCode from Table airports. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the code of airport that has the highest number of flights? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average age for all students who do not own any pets ? The corresponding SQL is:""This is a task converting text into SQL statement.\nWe will first give the dataset schema and then ask a question in text.\nYou are asked to generate an SQL statement.\nHere is the test question to be answered: Let us take a question and turn it into a SQL statement about database tables. There are 3 tables. Their titles are: Student, Has_Pet, Pets. \nTable 1 is Student, and its column names are: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code. \nTable 2 is Has_Pet, and its column names are: StuID, PetID. \nTable 3 is Pets, and its column names are: PetID, PetType, pet_age, weight. \nThe primary keys are: StuID from Table Student, PetID from Table Pets.\nThe foreign keys are: StuID from Table Has_Pet is equivalent to StuID from Table Student, PetID from Table Has_Pet is equivalent to PetID from Table Pets. Use foreign keys to join Tables. Columns with relevant values: ; Only use columns with relevant values to generate SQL. \nLet us take a text question and turn it into a SQL statement about database tables. The question is: What is the average age for all students who do not own any pets ? The corresponding SQL is:"